{
  "titulo": "Guía Completa de Estudio Azure - 300+ Preguntas y Respuestas",
  "descripcion": "Guía completa con traducción al español, código de ejemplo, pruebas unitarias y explicaciones detalladas",
  "niveles": {
    "basico": {
      "descripcion": "Conceptos fundamentales de Azure para principiantes",
      "preguntas": [
        {
          "id": 6,
          "pregunta_original": "global distribution and horizontal scaling for databases. Option 1: Cosmos DB",
          "pregunta_traducida": "global distribution and horizontal scaling for databases. Option 1: Cosmos DB",
          "opciones": [
            "Option 3: Database Scaling",
            "Option 4: Azure Shard"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Cosmos DB is designed for global distribution and horizontal scaling of databases. Options 2, 3, and 4 are not speciﬁcally designed for global distribution and scaling.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nglobal distribution and horizontal scaling for databases. Option 1: Cosmos DB\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre global distribution and horizontal scaling en Azure.\n\n### Opciones\nA. Option 3: Database Scaling - Correcta\nB. Option 4: Azure Shard - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 13,
          "pregunta_original": "hybrid networks between on-premises data centers and Azure. Option 1: Hybrid",
          "pregunta_traducida": "hybrid networks between on-premises data centers and Azure. Option 1: Hybrid",
          "opciones": [
            "Option 3: VPN",
            "Option 4: Connectivity"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure VPN Gateway facilitates secure and reliable hybrid network connections between on-premises data centers and Azure.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nhybrid networks between on-premises data centers and Azure. Option 1: Hybrid\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre hybrid networks between on-premises data en Azure.\n\n### Opciones\nA. Option 3: VPN - Correcta\nB. Option 4: Connectivity - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 32,
          "pregunta_original": "should implement Azure _______ Network Security Groups. Option 1: Subnet",
          "pregunta_traducida": "should implement Azure _______ Network Seguridad Groups. Option 1: Subnet",
          "opciones": [
            "Option 3: Inbound",
            "Option 4: Outbound"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Network Security Groups (NSGs) are used to control inbound and outbound trafﬁc to network interfaces, enhancing the security posture of Azure Virtual Machines.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nshould implement Azure _______ Network Seguridad Groups. Option 1: Subnet\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre should implement Azure _______ Network en Azure.\n\n### Opciones\nA. Option 3: Inbound - Correcta\nB. Option 4: Outbound - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "intermedio": {
      "descripcion": "Servicios y configuraciones avanzadas de Azure",
      "preguntas": [
        {
          "id": 3,
          "pregunta_original": "the network topology of applications in Azure Architecture. Option 1: Azure Virtual Network",
          "pregunta_traducida": "the network topology of applications in Azure Architecture. Option 1: Azure Red Virtual",
          "opciones": [
            "Option 3: Azure Logic Apps",
            "Option 4: Azure Cosmos DB"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Virtual Network allows you to deﬁne the network topology of applications in Azure. It provides isolation, segmentation, and connectivity for your Azure resources. Azure Functions, Logic Apps, and Cosmos DB serve dif ferent purposes.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nthe network topology of applications in Azure Architecture. Option 1: Azure Red Virtual\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre the network topology of applications en Azure.\n\n### Opciones\nA. Option 3: Azure Logic Apps - Correcta\nB. Option 4: Azure Cosmos DB - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 5,
          "pregunta_original": "policies help enforce organizational standards and assess compliance. Option 1: Regulatory",
          "pregunta_traducida": "policies help enforce organizational standards and assess compliance. Option 1: Regulatory",
          "opciones": [
            "Option 3: Compliance",
            "Option 4: Security"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Policy is used to enforce or ganizational standards and assess compliance within Azure Resources and Subscriptions. Options 1, 3, and 4 are related to compliance but not speciﬁc to Azure policies.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\npolicies help enforce organizational standards and assess compliance. Option 1: Regulatory\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre policies help enforce organizational standards en Azure.\n\n### Opciones\nA. Option 3: Compliance - Correcta\nB. Option 4: Security - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 15,
          "pregunta_original": "Management Groups allow for hierarchical management of multiple subscriptions. Option 1: Resource",
          "pregunta_traducida": "Management Groups allow for hierarchical management of multiple subscriptions. Option 1: Resource",
          "opciones": [
            "Option 3: Azure AD",
            "Option 4: Azure Blueprints"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Resource Management Groups provide a hierarchical structure for managing resources and subscriptions, enabling efﬁcient organization and governance.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nManagement Groups allow for hierarchical management of multiple subscriptions. Option 1: Resource\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Management Groups allow for hierarchical en Azure.\n\n### Opciones\nA. Option 3: Azure AD - Correcta\nB. Option 4: Azure Blueprints - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 16,
          "pregunta_original": "Which Azure service would best meet this requirement? Option 1: Azure Trafﬁc Manager",
          "pregunta_traducida": "¿Cuál Azure service would best meet this requirement? Option 1: Azure Trafﬁc Manager",
          "opciones": [
            "Option 3: Azure Application Gateway",
            "Option 4: Azure Load Balancer"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Front Door is designed for global load balancing, providing high availability and performance by distributing user trafﬁc across multiple regions.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cuál Azure service would best meet this requirement? Option 1: Azure Trafﬁc Manager\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Which Azure service would best en Azure.\n\n### Opciones\nA. Option 3: Azure Application Gateway - Correcta\nB. Option 4: Azure Load Balancer - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 17,
          "pregunta_original": "premises data center and Azure. What Azure service would you recommend? Option 1: Azure ExpressRoute",
          "pregunta_traducida": "premises data center and Azure. What Azure service would you recommend? Option 1: Azure ExpressRoute",
          "opciones": [
            "Option 3: Azure Virtual Network",
            "Option 4: Azure Hybrid Connections"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute of fers a dedicated, private connection between on-premises data centers and Azure, ensuring secure and reliable hybrid network conﬁgurations.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\npremises data center and Azure. What Azure service would you recommend? Option 1: Azure ExpressRoute\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre premises data center and Azure. en Azure.\n\n### Opciones\nA. Option 3: Azure Virtual Network - Correcta\nB. Option 4: Azure Hybrid Connections - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 18,
          "pregunta_original": "uniﬁed security management system. Which Azure service would be the most appropriate? Option 1: Azure Security Center",
          "pregunta_traducida": "uniﬁed security management system. ¿Cuál Azure service would be the most appropriate? Option 1: Azure Seguridad Center",
          "opciones": [
            "Option 3: Azure Sentinel",
            "Option 4: Azure Active Directory"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Sentinel is a cloud-native SIEM (Security Information and Event Management) service that provides advanced threat protection, detection of suspicious activities, and uniﬁed security management for global enterprises.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nuniﬁed security management system. ¿Cuál Azure service would be the most appropriate? Option 1: Azure Seguridad Center\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre uniﬁed security management system. Which en Azure.\n\n### Opciones\nA. Option 3: Azure Sentinel - Correcta\nB. Option 4: Azure Active Directory - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 20,
          "pregunta_original": "automatic scaling of compute resources based on demand? Option 1: Azure Load Balancer",
          "pregunta_traducida": "automatic scaling of compute resources based on demand? Option 1: Azure Balanceador de Carga",
          "opciones": [
            "Option 3: Azure Virtual Network",
            "Option 4: Azure Resource Manager"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Auto Scaling enables automatic adjustment of compute resources based on demand, ensuring optimal performance and cost efﬁciency .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nautomatic scaling of compute resources based on demand? Option 1: Azure Balanceador de Carga\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre automatic scaling of compute resources en Azure.\n\n### Opciones\nA. Option 3: Azure Virtual Network - Correcta\nB. Option 4: Azure Resource Manager - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 21,
          "pregunta_original": "highly available, and massively scalable cloud storage solution. Option 1: Azure Blob Storage",
          "pregunta_traducida": "highly available, and massively scalable cloud storage solution. Option 1: Azure Blob Almacenamiento",
          "opciones": [
            "Option 3: Azure Queue Storage",
            "Option 4: Azure File Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Blob Storage is a robust and scalable cloud storage solution, of fering durability , high availability , and massive scalability for various types of data.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nhighly available, and massively scalable cloud storage solution. Option 1: Azure Blob Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre highly available, and massively scalable en Azure.\n\n### Opciones\nA. Option 3: Azure Queue Storage - Correcta\nB. Option 4: Azure File Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 25,
          "pregunta_original": "Explain how Azure Storage Service Encryption (SSE) enhances data security. Option 1: SSE encrypts data at rest",
          "pregunta_traducida": "Explain how Azure Almacenamiento Service Encryption (SSE) enhances data security. Option 1: SSE encrypts data at rest",
          "opciones": [
            "Option 3: SSE encrypts data in memory",
            "Option 4: SSE encrypts data during processing"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Storage Service Encryption (SSE) enhances data security by encrypting data at rest, ensuring that even if unauthorized access occurs, the data remains protected.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nExplain how Azure Almacenamiento Service Encryption (SSE) enhances data security. Option 1: SSE encrypts data at rest\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Explain how Azure Storage Service en Azure.\n\n### Opciones\nA. Option 3: SSE encrypts data in memory - Correcta\nB. Option 4: SSE encrypts data during processing - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 27,
          "pregunta_original": "Describe how Azure Disk Encryption secures data on Azure Virtual Machines. Option 1: Encrypts OS and data disks",
          "pregunta_traducida": "Describe how Azure Disk Encryption secures data on Azure Máquina Virtuals. Option 1: Encrypts OS and data disks",
          "opciones": [
            "Option 3: Provides ﬁrewall protection",
            "Option 4: Monitors disk performance"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Disk Encryption secures data on Azure Virtual Machines by encrypting both the OS and data disks, safeguarding sensitive information from unauthorized access.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nDescribe how Azure Disk Encryption secures data on Azure Máquina Virtuals. Option 1: Encrypts OS and data disks\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Describe how Azure Disk Encryption en Azure.\n\n### Opciones\nA. Option 3: Provides ﬁrewall protection - Correcta\nB. Option 4: Monitors disk performance - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 28,
          "pregunta_original": "Azure _______ provides a serverless ﬁle system that can be shared by Azure Virtual Machines. Option 1: Blob Storage",
          "pregunta_traducida": "Azure _______ provides a serverless ﬁle system that can be shared by Azure Máquina Virtuals. Option 1: Blob Almacenamiento",
          "opciones": [
            "Option 3: Table Storage",
            "Option 4: Queue Storage"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure File Storage is designed to provide a serverless ﬁle system that can be shared among Azure Virtual Machines, making it suitable for scenarios that require shared ﬁle access.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure _______ provides a serverless ﬁle system that can be shared by Azure Máquina Virtuals. Option 1: Blob Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure _______ provides a serverless en Azure.\n\n### Opciones\nA. Option 3: Table Storage - Correcta\nB. Option 4: Queue Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 29,
          "pregunta_original": "In Azure Storage Solutions, the _______ tier is optimized for storing data that is accessed infrequently. Option 1: Hot",
          "pregunta_traducida": "En Azure Almacenamiento Solutions, the _______ tier is optimized for storing data that is accessed infrequently. Option 1: Hot",
          "opciones": [
            "Option 3: Archive",
            "Option 4: Standard"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: The Archive tier in Azure Storage Solutions is optimized for storing data that is accessed infrequently , providing a cost-ef fective solution for archival storage needs.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Almacenamiento Solutions, the _______ tier is optimized for storing data that is accessed infrequently. Option 1: Hot\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Storage Solutions, the en Azure.\n\n### Opciones\nA. Option 3: Archive - Correcta\nB. Option 4: Standard - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 30,
          "pregunta_original": "for tasks like conﬁguration management and script execution. Option 1: Scripting",
          "pregunta_traducida": "for tasks like conﬁguration management and script execution. Option 1: Scripting",
          "opciones": [
            "Option 3: Extension",
            "Option 4: Automation"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Virtual Machines support Extensions, which are small applications that provide post-deployment conﬁguration and automation tasks, enhancing the VM's functionality .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nfor tasks like conﬁguration management and script execution. Option 1: Scripting\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre for tasks like conﬁguration management en Azure.\n\n### Opciones\nA. Option 3: Extension - Correcta\nB. Option 4: Automation - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 31,
          "pregunta_original": "The Azure _______ service is used for large-scale, parallel data processing scenarios. Option 1: Data Lake",
          "pregunta_traducida": "The Azure _______ service is used for large-scale, parallel data processing scenarios. Option 1: Data Lake",
          "opciones": [
            "Option 3: HDInsight",
            "Option 4: Stream Analytics"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Databricks is a cloud-based big data analytics platform designed for lar ge-scale data processing, making it suitable for parallel data processing scenarios.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nThe Azure _______ service is used for large-scale, parallel data processing scenarios. Option 1: Data Lake\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre The Azure _______ service is en Azure.\n\n### Opciones\nA. Option 3: HDInsight - Correcta\nB. Option 4: Stream Analytics - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 33,
          "pregunta_original": "ensures that data is replicated across multiple data centers. Option 1: Locally Redundant",
          "pregunta_traducida": "ensures that data is replicated across multiple data centers. Option 1: Locally Redundant",
          "opciones": [
            "Option 3: Zone Redundant",
            "Option 4: Read-Access"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Geo-Redundant Storage (GRS) in Azure ensures data durability by replicating it across multiple data centers in dif ferent geographic regions, providing high availability .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nensures that data is replicated across multiple data centers. Option 1: Locally Redundant\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre ensures that data is replicated en Azure.\n\n### Opciones\nA. Option 3: Zone Redundant - Correcta\nB. Option 4: Read-Access - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 34,
          "pregunta_original": "must be preserved for a long period. Which Azure storage service should they choose? Option 1: Azure Blob Storage",
          "pregunta_traducida": "must be preserved for a long period. ¿Cuál Azure storage service should they choose? Option 1: Azure Blob Almacenamiento",
          "opciones": [
            "Option 3: Azure Queue Storage",
            "Option 4: Azure Table Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Blob Storage is the optimal choice for cold data due to its cost-ef fectiveness and ability to store lar ge amounts of unstructured data for long durations.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nmust be preserved for a long period. ¿Cuál Azure storage service should they choose? Option 1: Azure Blob Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre must be preserved for a en Azure.\n\n### Opciones\nA. Option 3: Azure Queue Storage - Correcta\nB. Option 4: Azure Table Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 35,
          "pregunta_original": "environment. Which feature would be essential to include? Option 1: Availability Sets",
          "pregunta_traducida": "environment. ¿Cuál feature would be essential to include? Option 1: Availability Sets",
          "opciones": [
            "Option 3: Azure Load Balancer",
            "Option 4: Azure Trafﬁc Manager"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Availability Sets ensure high availability by distributing VMs across multiple fault domains, minimizing downtime during planned or unplanned events.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nenvironment. ¿Cuál feature would be essential to include? Option 1: Availability Sets\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre environment. Which feature would be en Azure.\n\n### Opciones\nA. Option 3: Azure Load Balancer - Correcta\nB. Option 4: Azure Trafﬁc Manager - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 39,
          "pregunta_original": "interconnection of Azure resources in a secure and private environment. Option 1: Azure Virtual Network",
          "pregunta_traducida": "interconnection of Azure resources in a secure and private environment. Option 1: Azure Red Virtual",
          "opciones": [
            "Option 3: Azure Blob Storage",
            "Option 4: Azure SQL  Database"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Virtual Network enables the secure and private interconnection of Azure resources, providing a dedicated and isolated environment for communication.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\ninterconnection of Azure resources in a secure and private environment. Option 1: Azure Red Virtual\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre interconnection of Azure resources in en Azure.\n\n### Opciones\nA. Option 3: Azure Blob Storage - Correcta\nB. Option 4: Azure SQL  Database - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 42,
          "pregunta_original": "optimizing and controlling the distribution of user trafﬁc across global Azure regions? Option 1: Azure Trafﬁc Manager",
          "pregunta_traducida": "optimizing and controlling the distribution of user trafﬁc across global Azure regions? Option 1: Azure Trafﬁc Manager",
          "opciones": [
            "Option 3: Azure Application Gateway",
            "Option 4: Azure Content Delivery Network"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Trafﬁc Manager is used to optimize and control the distribution of user trafﬁc across global Azure regions for improved performance and availability .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\noptimizing and controlling the distribution of user trafﬁc across global Azure regions? Option 1: Azure Trafﬁc Manager\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre optimizing and controlling the distribution en Azure.\n\n### Opciones\nA. Option 3: Azure Application Gateway - Correcta\nB. Option 4: Azure Content Delivery Network - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 45,
          "pregunta_original": "protecting web applications from common web vulnerabilities? Option 1: Content Delivery Network (CDN)",
          "pregunta_traducida": "protecting web applications from common web vulnerabilities? Option 1: Content Delivery Network (CDN)",
          "opciones": [
            "Option 3: Load Balancer",
            "Option 4: Azure API Management"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Application Gateway includes a Web Application Firewall (W AF) that protects web applications from common vulnerabilities by ﬁltering and monitoring HTTP  trafﬁc between the internet and the application.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nprotecting web applications from common web vulnerabilities? Option 1: Content Delivery Network (CDN)\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre protecting web applications from common en Azure.\n\n### Opciones\nA. Option 3: Load Balancer - Correcta\nB. Option 4: Azure API Management - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 46,
          "pregunta_original": "connection to Azure that enhances data privacy and security. Option 1: ExpressRoute",
          "pregunta_traducida": "connection to Azure that enhances data privacy and security. Option 1: ExpressRoute",
          "opciones": [
            "Option 3: Direct Connect",
            "Option 4: PrivateLink"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute provides a dedicated and private connection to Azure through a ﬁber network, ensuring enhanced data privacy and security .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nconnection to Azure that enhances data privacy and security. Option 1: ExpressRoute\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre connection to Azure that enhances en Azure.\n\n### Opciones\nA. Option 3: Direct Connect - Correcta\nB. Option 4: PrivateLink - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 47,
          "pregunta_original": "In Azure Security Basics, Azure _______ is crucial for protecting data at rest through encryption. Option 1: Key Vault",
          "pregunta_traducida": "En Azure Seguridad Basics, Azure _______ is crucial for protecting data at rest through encryption. Option 1: Key Vault",
          "opciones": [
            "Option 3: Sentinel",
            "Option 4: Security Center"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Key Vault is crucial for protecting data at rest by managing and safeguarding cryptographic keys, secrets, and certiﬁcates through encryption.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Seguridad Basics, Azure _______ is crucial for protecting data at rest through encryption. Option 1: Key Vault\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Security Basics, Azure en Azure.\n\n### Opciones\nA. Option 3: Sentinel - Correcta\nB. Option 4: Security Center - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 48,
          "pregunta_original": "management of network trafﬁc rules across multiple subscriptions and virtual networks. Option 1: Network Security Group",
          "pregunta_traducida": "management of network trafﬁc rules across multiple subscriptions and virtual networks. Option 1: Network Seguridad Group",
          "opciones": [
            "Option 3: Azure Bastion",
            "Option 4: Application Gateway"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Firewall enables centralized management of network trafﬁc rules, ensuring consistent security policies across various subscriptions and virtual networks.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nmanagement of network trafﬁc rules across multiple subscriptions and virtual networks. Option 1: Network Seguridad Group\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre management of network trafﬁc rules en Azure.\n\n### Opciones\nA. Option 3: Azure Bastion - Correcta\nB. Option 4: Application Gateway - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 49,
          "pregunta_original": "Azure _______ Insights provides comprehensive network monitoring and analytics. Option 1: Application",
          "pregunta_traducida": "Azure _______ Insights provides comprehensive network monitoring and analytics. Option 1: Application",
          "opciones": [
            "Option 3: Security",
            "Option 4: Performance"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Network Insights is a service focused on providing detailed monitoring and analytics for network-related activities in Azure. It helps in optimizing and securing network performance.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure _______ Insights provides comprehensive network monitoring and analytics. Option 1: Application\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure _______ Insights provides comprehensive en Azure.\n\n### Opciones\nA. Option 3: Security - Correcta\nB. Option 4: Performance - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "avanzado": {
      "descripcion": "Arquitecturas complejas y optimizaciones avanzadas",
      "preguntas": [
        {
          "id": 1,
          "pregunta_original": "What is the primary purpose of Azure Resource Manager in Azure Architecture? Option 1: Resource provisioning and management",
          "pregunta_traducida": "¿Qué es the primary purpose of Azure Resource Manager in Azure Architecture? Option 1: Resource provisioning and management",
          "opciones": [
            "Option 3: Security and compliance",
            "Option 4: Data storage and retrieval"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Resource Manager is primarily responsible for provisioning and managing Azure resources. It helps in deploying, updating, and deleting resources, making it an essential component in Azure's infrastructure. It doesn't handle billing, security , or data storage directly .",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"storageAccountName\": {\n      \"type\": \"string\",\n      \"defaultValue\": \"mystorageaccount\"\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Storage/storageAccounts\",\n      \"apiVersion\": \"2021-09-01\",\n      \"name\": \"[parameters('storageAccountName')]\",\n      \"location\": \"[resourceGroup().location]\",\n      \"sku\": {\n        \"name\": \"Standard_LRS\"\n      },\n      \"kind\": \"StorageV2\"\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom azure.mgmt.resource import ResourceManagementClient\n\nclass TestAzureResourceManager(unittest.TestCase):\n    \n    def setUp(self):\n        self.mock_credential = Mock()\n        self.resource_client = ResourceManagementClient(\n            self.mock_credential, \n            \"test-subscription-id\"\n        )\n    \n    def test_resource_group_creation(self):\n        # Prueba la creación de un grupo de recursos\n        with patch.object(self.resource_client.resource_groups, 'create_or_update') as mock_create:\n            mock_create.return_value = Mock(name=\"test-rg\")\n            \n            result = self.resource_client.resource_groups.create_or_update(\n                \"test-rg\",\n                {\"location\": \"eastus\"}\n            )\n            \n            mock_create.assert_called_once()\n            self.assertEqual(result.name, \"test-rg\")\n    \n    def test_resource_deployment(self):\n        # Prueba el despliegue de recursos\n        with patch.object(self.resource_client.deployments, 'create_or_update') as mock_deploy:\n            mock_deploy.return_value = Mock(properties=Mock(provisioning_state=\"Succeeded\"))\n            \n            result = self.resource_client.deployments.create_or_update(\n                \"test-rg\",\n                \"test-deployment\",\n                {\"template\": {}, \"parameters\": {}}\n            )\n            \n            self.assertEqual(result.properties.provisioning_state, \"Succeeded\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the primary purpose of Azure Resource Manager in Azure Architecture? Option 1: Resource provisioning and management\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the primary purpose en Azure.\n\n### Opciones\nA. Option 3: Security and compliance - Correcta\nB. Option 4: Data storage and retrieval - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 2,
          "pregunta_original": "In Azure, which feature allows you to organize resources into logical groups for easy management? Option 1: Resource Groups",
          "pregunta_traducida": "En Azure, which feature allows you to organize resources into logical groups for easy management? Option 1: Grupo de Recursoss",
          "opciones": [
            "Option 3: Azure Active Directory",
            "Option 4: Azure Key Vault"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Resource Groups are used to or ganize and manage Azure resources ef fectively . They provide a way to manage and apply policies and access control to a group of resources. Virtual Networks, Azure Active Directory , and Azure Key Vault serve dif ferent purposes in Azure.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure, which feature allows you to organize resources into logical groups for easy management? Option 1: Grupo de Recursoss\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure, which feature allows en Azure.\n\n### Opciones\nA. Option 3: Azure Active Directory - Correcta\nB. Option 4: Azure Key Vault - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 4,
          "pregunta_original": "Azure _______ is used to automate the deployment and conﬁguration of resources in Azure Architecture. Option 1: Resource Manager (ARM)",
          "pregunta_traducida": "Azure _______ is used to automate the deployment and conﬁguration of resources in Azure Architecture. Option 1: Resource Manager (ARM)",
          "opciones": [
            "Option 3: Deployment Engine",
            "Option 4: Conﬁgurator"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Automation is used to automate the deployment and conﬁguration of resources in Azure. Options 1, 3, and 4 are not speciﬁc to automation in Azure.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"storageAccountName\": {\n      \"type\": \"string\",\n      \"defaultValue\": \"mystorageaccount\"\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Storage/storageAccounts\",\n      \"apiVersion\": \"2021-09-01\",\n      \"name\": \"[parameters('storageAccountName')]\",\n      \"location\": \"[resourceGroup().location]\",\n      \"sku\": {\n        \"name\": \"Standard_LRS\"\n      },\n      \"kind\": \"StorageV2\"\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom azure.mgmt.resource import ResourceManagementClient\n\nclass TestAzureResourceManager(unittest.TestCase):\n    \n    def setUp(self):\n        self.mock_credential = Mock()\n        self.resource_client = ResourceManagementClient(\n            self.mock_credential, \n            \"test-subscription-id\"\n        )\n    \n    def test_resource_group_creation(self):\n        # Prueba la creación de un grupo de recursos\n        with patch.object(self.resource_client.resource_groups, 'create_or_update') as mock_create:\n            mock_create.return_value = Mock(name=\"test-rg\")\n            \n            result = self.resource_client.resource_groups.create_or_update(\n                \"test-rg\",\n                {\"location\": \"eastus\"}\n            )\n            \n            mock_create.assert_called_once()\n            self.assertEqual(result.name, \"test-rg\")\n    \n    def test_resource_deployment(self):\n        # Prueba el despliegue de recursos\n        with patch.object(self.resource_client.deployments, 'create_or_update') as mock_deploy:\n            mock_deploy.return_value = Mock(properties=Mock(provisioning_state=\"Succeeded\"))\n            \n            result = self.resource_client.deployments.create_or_update(\n                \"test-rg\",\n                \"test-deployment\",\n                {\"template\": {}, \"parameters\": {}}\n            )\n            \n            self.assertEqual(result.properties.provisioning_state, \"Succeeded\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure _______ is used to automate the deployment and conﬁguration of resources in Azure Architecture. Option 1: Resource Manager (ARM)\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure _______ is used to en Azure.\n\n### Opciones\nA. Option 3: Deployment Engine - Correcta\nB. Option 4: Conﬁgurator - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 7,
          "pregunta_original": "How does Azure Service Fabric contribute to application scalability in Azure Architecture? Option 1: Automatic partitioning and distribution",
          "pregunta_traducida": "¿Cómo Azure Service Fabric contribute to application scalability in Azure Architecture? Option 1: Automatic partitioning and distribution",
          "opciones": [
            "Option 3: Resource monitoring",
            "Option 4: Data encryption"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Service Fabric enables application scalability through automatic partitioning and distribution of services, ensuring efﬁcient resource utilization.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cómo Azure Service Fabric contribute to application scalability in Azure Architecture? Option 1: Automatic partitioning and distribution\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre How does Azure Service Fabric en Azure.\n\n### Opciones\nA. Option 3: Resource monitoring - Correcta\nB. Option 4: Data encryption - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 8,
          "pregunta_original": "In Azure Subscriptions, what is the signiﬁcance of the 'Scope' in terms of resource access and permissions? Option 1: Deﬁnes the boundaries for resource access",
          "pregunta_traducida": "En Azure Suscripcións, what is the signiﬁcance of the 'Scope' in terms of resource access and permissions? Option 1: Deﬁnes the boundaries for resource access",
          "opciones": [
            "Option 3: Controls resource pricing",
            "Option 4: Speciﬁes resource location"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: The 'Scope' in Azure Subscriptions deﬁnes the boundaries for resource access and permissions, determining who can access speciﬁc resources.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Suscripcións, what is the signiﬁcance of the 'Scope' in terms of resource access and permissions? Option 1: Deﬁnes the boundaries for resource access\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Subscriptions, what is en Azure.\n\n### Opciones\nA. Option 3: Controls resource pricing - Correcta\nB. Option 4: Speciﬁes resource location - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 9,
          "pregunta_original": "What role does Azure Trafﬁc Manager play in Azure's global networking architecture? Option 1: Distributing incoming network trafﬁc across multiple servers",
          "pregunta_traducida": "What role does Azure Trafﬁc Manager play in Azure's global networking architecture? Option 1: Distributing incoming network trafﬁc across multiple servers",
          "opciones": [
            "Option 3: Ensuring data security in transit",
            "Option 4: Optimizing database queries"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Trafﬁc Manager contributes to global networking by distributing incoming trafﬁc across multiple servers, enhancing availability and responsiveness.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nWhat role does Azure Trafﬁc Manager play in Azure's global networking architecture? Option 1: Distributing incoming network trafﬁc across multiple servers\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What role does Azure Trafﬁc en Azure.\n\n### Opciones\nA. Option 3: Ensuring data security in transit - Correcta\nB. Option 4: Optimizing database queries - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 10,
          "pregunta_original": "Describe how Azure's ExpressRoute enhances connectivity between on-premises networks and Azure. Option 1: Dedicated Network Connection",
          "pregunta_traducida": "Describe how Azure's ExpressRoute enhances connectivity between on-premises networks and Azure. Option 1: Dedicated Network Connection",
          "opciones": [
            "Option 3: Public Internet Connection",
            "Option 4: Load Balancing"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute provides a dedicated network connection, bypassing the public internet, ensuring secure, low-latency communication between on-premises networks and Azure resources.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nDescribe how Azure's ExpressRoute enhances connectivity between on-premises networks and Azure. Option 1: Dedicated Network Connection\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Describe how Azure's ExpressRoute enhances en Azure.\n\n### Opciones\nA. Option 3: Public Internet Connection - Correcta\nB. Option 4: Load Balancing - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 11,
          "pregunta_original": "What is the impact of implementing Azure's Availability Zones on application resilience? Option 1: Improved Fault Tolerance",
          "pregunta_traducida": "¿Qué es the impact of implementing Azure's Availability Zones on application resilience? Option 1: Improved Fault Tolerance",
          "opciones": [
            "Option 3: Reduced Scalability",
            "Option 4: Enhanced Backup Speed"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Availability Zones enhance application resilience by providing geographically distributed data centers, ensuring improved fault tolerance and high availability .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the impact of implementing Azure's Availability Zones on application resilience? Option 1: Improved Fault Tolerance\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the impact of en Azure.\n\n### Opciones\nA. Option 3: Reduced Scalability - Correcta\nB. Option 4: Enhanced Backup Speed - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 12,
          "pregunta_original": "Explain the role of Azure's Front Door service in optimizing web application performance and security. Option 1: Load Balancing",
          "pregunta_traducida": "Explain the role of Azure's Front Door service in optimizing web application performance and security. Option 1: Load Balancing",
          "opciones": [
            "Option 3: Content Delivery Network (CDN)",
            "Option 4: Authentication Service"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Front Door optimizes web application performance by leveraging Content Delivery Network (CDN) capabilities, ensuring faster content delivery globally while also enhancing security .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nExplain the role of Azure's Front Door service in optimizing web application performance and security. Option 1: Load Balancing\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Explain the role of Azure's en Azure.\n\n### Opciones\nA. Option 3: Content Delivery Network (CDN) - Correcta\nB. Option 4: Authentication Service - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 14,
          "pregunta_original": "The _______ feature in Azure Architecture is critical for building highly available cloud applications. Option 1: Load Balancing",
          "pregunta_traducida": "The _______ feature in Azure Architecture is critical for building highly available cloud applications. Option 1: Load Balancing",
          "opciones": [
            "Option 3: Disaster Recovery",
            "Option 4: Availability Sets"
          ],
          "respuesta_correcta": "Correct Response: 4.0",
          "explicacion": "Explanation: Availability Sets ensure high availability by distributing virtual machines across multiple fault domains to minimize downtime during planned or unplanned events.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nThe _______ feature in Azure Architecture is critical for building highly available cloud applications. Option 1: Load Balancing\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre The _______ feature in Azure en Azure.\n\n### Opciones\nA. Option 3: Disaster Recovery - Correcta\nB. Option 4: Availability Sets - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 19,
          "pregunta_original": "What type of storage is typically used for high- performance scenarios in Azure Storage Solutions? Option 1: Azure Premium Storage",
          "pregunta_traducida": "What type of storage is typically used for high- performance scenarios in Azure Almacenamiento Solutions? Option 1: Azure Premium Almacenamiento",
          "opciones": [
            "Option 3: Azure Blob Storage",
            "Option 4: Azure Table Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Premium Storage is designed for high-performance scenarios, providing low-latency , high-throughput storage for applications with demanding requirements.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nWhat type of storage is typically used for high- performance scenarios in Azure Almacenamiento Solutions? Option 1: Azure Premium Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What type of storage is en Azure.\n\n### Opciones\nA. Option 3: Azure Blob Storage - Correcta\nB. Option 4: Azure Table Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 22,
          "pregunta_original": "Storage in terms of structure and accessibility? Option 1: Blob Storage is for unstructured data and accessed via REST APIs",
          "pregunta_traducida": "Almacenamiento in terms of structure and accessibility? Option 1: Blob Almacenamiento is for unstructured data and accessed via REST APIs",
          "opciones": [
            "Option 3: Blob Storage is suitable for database storage",
            "Option 4: File Storage is optimized for lar ge media ﬁles"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Blob Storage is designed for unstructured data and is accessed through REST  APIs, making it ideal for various data types and scalable storage.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAlmacenamiento in terms of structure and accessibility? Option 1: Blob Almacenamiento is for unstructured data and accessed via REST APIs\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Storage in terms of structure en Azure.\n\n### Opciones\nA. Option 3: Blob Storage is suitable for database storage - Correcta\nB. Option 4: File Storage is optimized for lar ge media ﬁles - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 23,
          "pregunta_original": "What is the main advantage of using Azure Managed Disks with Azure Virtual Machines? Option 1: Simpliﬁed disk management and maintenance",
          "pregunta_traducida": "¿Qué es the main advantage of using Azure Managed Disks with Azure Máquina Virtuals? Option 1: Simpliﬁed disk management and maintenance",
          "opciones": [
            "Option 3: Increased VM performance",
            "Option 4: Better network connectivity"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Managed Disks simplify disk management, of fering ease of maintenance and scalability for virtual machines, reducing administrative overhead.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the main advantage of using Azure Managed Disks with Azure Máquina Virtuals? Option 1: Simpliﬁed disk management and maintenance\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the main advantage en Azure.\n\n### Opciones\nA. Option 3: Increased VM performance - Correcta\nB. Option 4: Better network connectivity - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 24,
          "pregunta_original": "In Azure Storage Solutions, what role does Azure Queue Storage play in application architecture? Option 1: Message broker for communication between components",
          "pregunta_traducida": "En Azure Almacenamiento Solutions, what role does Azure Queue Almacenamiento play in application architecture? Option 1: Message broker for communication between components",
          "opciones": [
            "Option 3: Cache for frequently accessed data",
            "Option 4: Backup storage for databases"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Queue Storage acts as a message broker , facilitating communication between dif ferent components of an application by storing and managing messages in a queue.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Almacenamiento Solutions, what role does Azure Queue Almacenamiento play in application architecture? Option 1: Message broker for communication between components\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Storage Solutions, what en Azure.\n\n### Opciones\nA. Option 3: Cache for frequently accessed data - Correcta\nB. Option 4: Backup storage for databases - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 26,
          "pregunta_original": "What are the beneﬁts of using Azure Reserved VM Instances in cost management and capacity planning? Option 1: Cost savings",
          "pregunta_traducida": "What are the beneﬁts of using Azure Reserved VM Instances in cost management and capacity planning? Option 1: Cost savings",
          "opciones": [
            "Option 3: Dynamic scaling",
            "Option 4: Pay-as-you-go pricing"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Reserved VM Instances provide cost savings by allowing users to commit to a one- or three-year term, reducing costs compared to pay-as-you-go pricing.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nWhat are the beneﬁts of using Azure Reserved VM Instances in cost management and capacity planning? Option 1: Cost savings\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What are the beneﬁts of en Azure.\n\n### Opciones\nA. Option 3: Dynamic scaling - Correcta\nB. Option 4: Pay-as-you-go pricing - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 36,
          "pregunta_original": "Azure storage option that provides low latency and high throughput. What would be the best choice? Option 1: Azure Premium Storage",
          "pregunta_traducida": "Azure storage option that provides low latency and high throughput. What would be the best choice? Option 1: Azure Premium Almacenamiento",
          "opciones": [
            "Option 3: Azure Blob Storage",
            "Option 4: Azure Disk Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Premium Storage is designed for data-intensive applications, of fering low latency and high throughput by using SSDs, making it suitable for performance-critical workloads.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure storage option that provides low latency and high throughput. What would be the best choice? Option 1: Azure Premium Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure storage option that provides en Azure.\n\n### Opciones\nA. Option 3: Azure Blob Storage - Correcta\nB. Option 4: Azure Disk Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 37,
          "pregunta_original": "What is the primary function of Azure Virtual Networks in Azure Networking? Option 1: Network Isolation and Segmentation",
          "pregunta_traducida": "¿Qué es the primary function of Azure Red Virtuals in Azure Networking? Option 1: Network Isolation and Segmentation",
          "opciones": [
            "Option 3: Data Backup and Recovery",
            "Option 4: Code Deployment"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Virtual Networks provide network isolation and segmentation, allowing you to logically isolate and segment resources within your Azure environment for enhanced security and performance.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the primary function of Azure Red Virtuals in Azure Networking? Option 1: Network Isolation and Segmentation\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the primary function en Azure.\n\n### Opciones\nA. Option 3: Data Backup and Recovery - Correcta\nB. Option 4: Code Deployment - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 38,
          "pregunta_original": "In Azure Security Basics, which tool is used primarily for detecting and responding to security threats? Option 1: Azure Security Center",
          "pregunta_traducida": "En Azure Seguridad Basics, which tool is used primarily for detecting and responding to security threats? Option 1: Azure Seguridad Center",
          "opciones": [
            "Option 3: Azure Key Vault",
            "Option 4: Azure Blob Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Security Center is the primary tool used for detecting and responding to security threats in Azure. It provides advanced threat protection across your Azure workloads.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Seguridad Basics, which tool is used primarily for detecting and responding to security threats? Option 1: Azure Seguridad Center\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Security Basics, which en Azure.\n\n### Opciones\nA. Option 3: Azure Key Vault - Correcta\nB. Option 4: Azure Blob Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 40,
          "pregunta_original": "How does Azure Network Security Group (NSG) contribute to network security in Azure Networking? Option 1: Filters network trafﬁc",
          "pregunta_traducida": "¿Cómo Azure Network Seguridad Group (NSG) contribute to network security in Azure Networking? Option 1: Filters network trafﬁc",
          "opciones": [
            "Option 3: Creates virtual networks",
            "Option 4: Monitors Azure resources"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure NSG ﬁlters and controls incoming and outgoing network trafﬁc, providing a layer of security by deﬁning rules for communication.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cómo Azure Network Seguridad Group (NSG) contribute to network security in Azure Networking? Option 1: Filters network trafﬁc\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre How does Azure Network Security en Azure.\n\n### Opciones\nA. Option 3: Creates virtual networks - Correcta\nB. Option 4: Monitors Azure resources - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 41,
          "pregunta_original": "What is the role of Azure Active Directory in Azure Security Basics for identity management? Option 1: Manages virtual machines",
          "pregunta_traducida": "¿Qué es the role of Azure Active Directory in Azure Seguridad Basics for identity management? Option 1: Manages virtual machines",
          "opciones": [
            "Option 3: Manages identities and authentication",
            "Option 4: Manages storage accounts"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure AD plays a crucial role in identity management and authentication, ensuring secure access to Azure resources.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the role of Azure Active Directory in Azure Seguridad Basics for identity management? Option 1: Manages virtual machines\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the role of en Azure.\n\n### Opciones\nA. Option 3: Manages identities and authentication - Correcta\nB. Option 4: Manages storage accounts - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 43,
          "pregunta_original": "Describe the purpose of Azure ExpressRoute in enhancing network connectivity and performance. Option 1: Private dedicated network connection",
          "pregunta_traducida": "Describe the purpose of Azure ExpressRoute in enhancing network connectivity and performance. Option 1: Private dedicated network connection",
          "opciones": [
            "Option 3: Load balancing for web applications",
            "Option 4: Azure VPN Gateway"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute provides a private, dedicated connection between on-premises data centers and Azure, enhancing network connectivity and performance by bypassing the public internet.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nDescribe the purpose of Azure ExpressRoute in enhancing network connectivity and performance. Option 1: Private dedicated network connection\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Describe the purpose of Azure en Azure.\n\n### Opciones\nA. Option 3: Load balancing for web applications - Correcta\nB. Option 4: Azure VPN Gateway - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 44,
          "pregunta_original": "How does Azure Sentinel aid in enterprise-level security management and threat detection? Option 1: Machine Learning for anomaly detection",
          "pregunta_traducida": "¿Cómo Azure Sentinel aid in enterprise-level security management and threat detection? Option 1: Machine Learning for anomaly detection",
          "opciones": [
            "Option 3: Network ﬁrewall conﬁguration",
            "Option 4: Identity and Access Management (IAM)"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Sentinel acts as a centralized SIEM tool, leveraging advanced analytics and machine learning for security management and threat detection across the enterprise.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cómo Azure Sentinel aid in enterprise-level security management and threat detection? Option 1: Machine Learning for anomaly detection\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre How does Azure Sentinel aid en Azure.\n\n### Opciones\nA. Option 3: Network ﬁrewall conﬁguration - Correcta\nB. Option 4: Identity and Access Management (IAM) - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 50,
          "pregunta_original": "In Azure Security Basics, _______ is a key service for managing the security posture of Azure resources. Option 1: Azure Defender",
          "pregunta_traducida": "En Azure Seguridad Basics, _______ is a key service for managing the security posture of Azure resources. Option 1: Azure Defender",
          "opciones": [
            "Option 3: Key Vault",
            "Option 4: Policy"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Security Center is a vital service that helps manage and enhance the overall security posture of Azure resources. It provides threat protection across workloads.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Seguridad Basics, _______ is a key service for managing the security posture of Azure resources. Option 1: Azure Defender\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Security Basics, _______ en Azure.\n\n### Opciones\nA. Option 3: Key Vault - Correcta\nB. Option 4: Policy - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    }
  },
  "categorias": {
    "fundamentos": {
      "descripcion": "Conceptos básicos de Azure y Resource Manager",
      "preguntas": [
        {
          "id": 1,
          "pregunta_original": "What is the primary purpose of Azure Resource Manager in Azure Architecture? Option 1: Resource provisioning and management",
          "pregunta_traducida": "¿Qué es the primary purpose of Azure Resource Manager in Azure Architecture? Option 1: Resource provisioning and management",
          "opciones": [
            "Option 3: Security and compliance",
            "Option 4: Data storage and retrieval"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Resource Manager is primarily responsible for provisioning and managing Azure resources. It helps in deploying, updating, and deleting resources, making it an essential component in Azure's infrastructure. It doesn't handle billing, security , or data storage directly .",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"storageAccountName\": {\n      \"type\": \"string\",\n      \"defaultValue\": \"mystorageaccount\"\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Storage/storageAccounts\",\n      \"apiVersion\": \"2021-09-01\",\n      \"name\": \"[parameters('storageAccountName')]\",\n      \"location\": \"[resourceGroup().location]\",\n      \"sku\": {\n        \"name\": \"Standard_LRS\"\n      },\n      \"kind\": \"StorageV2\"\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom azure.mgmt.resource import ResourceManagementClient\n\nclass TestAzureResourceManager(unittest.TestCase):\n    \n    def setUp(self):\n        self.mock_credential = Mock()\n        self.resource_client = ResourceManagementClient(\n            self.mock_credential, \n            \"test-subscription-id\"\n        )\n    \n    def test_resource_group_creation(self):\n        # Prueba la creación de un grupo de recursos\n        with patch.object(self.resource_client.resource_groups, 'create_or_update') as mock_create:\n            mock_create.return_value = Mock(name=\"test-rg\")\n            \n            result = self.resource_client.resource_groups.create_or_update(\n                \"test-rg\",\n                {\"location\": \"eastus\"}\n            )\n            \n            mock_create.assert_called_once()\n            self.assertEqual(result.name, \"test-rg\")\n    \n    def test_resource_deployment(self):\n        # Prueba el despliegue de recursos\n        with patch.object(self.resource_client.deployments, 'create_or_update') as mock_deploy:\n            mock_deploy.return_value = Mock(properties=Mock(provisioning_state=\"Succeeded\"))\n            \n            result = self.resource_client.deployments.create_or_update(\n                \"test-rg\",\n                \"test-deployment\",\n                {\"template\": {}, \"parameters\": {}}\n            )\n            \n            self.assertEqual(result.properties.provisioning_state, \"Succeeded\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the primary purpose of Azure Resource Manager in Azure Architecture? Option 1: Resource provisioning and management\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the primary purpose en Azure.\n\n### Opciones\nA. Option 3: Security and compliance - Correcta\nB. Option 4: Data storage and retrieval - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 4,
          "pregunta_original": "Azure _______ is used to automate the deployment and conﬁguration of resources in Azure Architecture. Option 1: Resource Manager (ARM)",
          "pregunta_traducida": "Azure _______ is used to automate the deployment and conﬁguration of resources in Azure Architecture. Option 1: Resource Manager (ARM)",
          "opciones": [
            "Option 3: Deployment Engine",
            "Option 4: Conﬁgurator"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Automation is used to automate the deployment and conﬁguration of resources in Azure. Options 1, 3, and 4 are not speciﬁc to automation in Azure.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"parameters\": {\n    \"storageAccountName\": {\n      \"type\": \"string\",\n      \"defaultValue\": \"mystorageaccount\"\n    }\n  },\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Storage/storageAccounts\",\n      \"apiVersion\": \"2021-09-01\",\n      \"name\": \"[parameters('storageAccountName')]\",\n      \"location\": \"[resourceGroup().location]\",\n      \"sku\": {\n        \"name\": \"Standard_LRS\"\n      },\n      \"kind\": \"StorageV2\"\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\nfrom azure.mgmt.resource import ResourceManagementClient\n\nclass TestAzureResourceManager(unittest.TestCase):\n    \n    def setUp(self):\n        self.mock_credential = Mock()\n        self.resource_client = ResourceManagementClient(\n            self.mock_credential, \n            \"test-subscription-id\"\n        )\n    \n    def test_resource_group_creation(self):\n        # Prueba la creación de un grupo de recursos\n        with patch.object(self.resource_client.resource_groups, 'create_or_update') as mock_create:\n            mock_create.return_value = Mock(name=\"test-rg\")\n            \n            result = self.resource_client.resource_groups.create_or_update(\n                \"test-rg\",\n                {\"location\": \"eastus\"}\n            )\n            \n            mock_create.assert_called_once()\n            self.assertEqual(result.name, \"test-rg\")\n    \n    def test_resource_deployment(self):\n        # Prueba el despliegue de recursos\n        with patch.object(self.resource_client.deployments, 'create_or_update') as mock_deploy:\n            mock_deploy.return_value = Mock(properties=Mock(provisioning_state=\"Succeeded\"))\n            \n            result = self.resource_client.deployments.create_or_update(\n                \"test-rg\",\n                \"test-deployment\",\n                {\"template\": {}, \"parameters\": {}}\n            )\n            \n            self.assertEqual(result.properties.provisioning_state, \"Succeeded\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure _______ is used to automate the deployment and conﬁguration of resources in Azure Architecture. Option 1: Resource Manager (ARM)\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure _______ is used to en Azure.\n\n### Opciones\nA. Option 3: Deployment Engine - Correcta\nB. Option 4: Conﬁgurator - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 5,
          "pregunta_original": "policies help enforce organizational standards and assess compliance. Option 1: Regulatory",
          "pregunta_traducida": "policies help enforce organizational standards and assess compliance. Option 1: Regulatory",
          "opciones": [
            "Option 3: Compliance",
            "Option 4: Security"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Policy is used to enforce or ganizational standards and assess compliance within Azure Resources and Subscriptions. Options 1, 3, and 4 are related to compliance but not speciﬁc to Azure policies.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\npolicies help enforce organizational standards and assess compliance. Option 1: Regulatory\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre policies help enforce organizational standards en Azure.\n\n### Opciones\nA. Option 3: Compliance - Correcta\nB. Option 4: Security - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 6,
          "pregunta_original": "global distribution and horizontal scaling for databases. Option 1: Cosmos DB",
          "pregunta_traducida": "global distribution and horizontal scaling for databases. Option 1: Cosmos DB",
          "opciones": [
            "Option 3: Database Scaling",
            "Option 4: Azure Shard"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Cosmos DB is designed for global distribution and horizontal scaling of databases. Options 2, 3, and 4 are not speciﬁcally designed for global distribution and scaling.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nglobal distribution and horizontal scaling for databases. Option 1: Cosmos DB\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre global distribution and horizontal scaling en Azure.\n\n### Opciones\nA. Option 3: Database Scaling - Correcta\nB. Option 4: Azure Shard - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 7,
          "pregunta_original": "How does Azure Service Fabric contribute to application scalability in Azure Architecture? Option 1: Automatic partitioning and distribution",
          "pregunta_traducida": "¿Cómo Azure Service Fabric contribute to application scalability in Azure Architecture? Option 1: Automatic partitioning and distribution",
          "opciones": [
            "Option 3: Resource monitoring",
            "Option 4: Data encryption"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Service Fabric enables application scalability through automatic partitioning and distribution of services, ensuring efﬁcient resource utilization.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cómo Azure Service Fabric contribute to application scalability in Azure Architecture? Option 1: Automatic partitioning and distribution\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre How does Azure Service Fabric en Azure.\n\n### Opciones\nA. Option 3: Resource monitoring - Correcta\nB. Option 4: Data encryption - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 8,
          "pregunta_original": "In Azure Subscriptions, what is the signiﬁcance of the 'Scope' in terms of resource access and permissions? Option 1: Deﬁnes the boundaries for resource access",
          "pregunta_traducida": "En Azure Suscripcións, what is the signiﬁcance of the 'Scope' in terms of resource access and permissions? Option 1: Deﬁnes the boundaries for resource access",
          "opciones": [
            "Option 3: Controls resource pricing",
            "Option 4: Speciﬁes resource location"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: The 'Scope' in Azure Subscriptions deﬁnes the boundaries for resource access and permissions, determining who can access speciﬁc resources.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Suscripcións, what is the signiﬁcance of the 'Scope' in terms of resource access and permissions? Option 1: Deﬁnes the boundaries for resource access\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Subscriptions, what is en Azure.\n\n### Opciones\nA. Option 3: Controls resource pricing - Correcta\nB. Option 4: Speciﬁes resource location - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 11,
          "pregunta_original": "What is the impact of implementing Azure's Availability Zones on application resilience? Option 1: Improved Fault Tolerance",
          "pregunta_traducida": "¿Qué es the impact of implementing Azure's Availability Zones on application resilience? Option 1: Improved Fault Tolerance",
          "opciones": [
            "Option 3: Reduced Scalability",
            "Option 4: Enhanced Backup Speed"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Availability Zones enhance application resilience by providing geographically distributed data centers, ensuring improved fault tolerance and high availability .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the impact of implementing Azure's Availability Zones on application resilience? Option 1: Improved Fault Tolerance\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the impact of en Azure.\n\n### Opciones\nA. Option 3: Reduced Scalability - Correcta\nB. Option 4: Enhanced Backup Speed - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 14,
          "pregunta_original": "The _______ feature in Azure Architecture is critical for building highly available cloud applications. Option 1: Load Balancing",
          "pregunta_traducida": "The _______ feature in Azure Architecture is critical for building highly available cloud applications. Option 1: Load Balancing",
          "opciones": [
            "Option 3: Disaster Recovery",
            "Option 4: Availability Sets"
          ],
          "respuesta_correcta": "Correct Response: 4.0",
          "explicacion": "Explanation: Availability Sets ensure high availability by distributing virtual machines across multiple fault domains to minimize downtime during planned or unplanned events.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nThe _______ feature in Azure Architecture is critical for building highly available cloud applications. Option 1: Load Balancing\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre The _______ feature in Azure en Azure.\n\n### Opciones\nA. Option 3: Disaster Recovery - Correcta\nB. Option 4: Availability Sets - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 15,
          "pregunta_original": "Management Groups allow for hierarchical management of multiple subscriptions. Option 1: Resource",
          "pregunta_traducida": "Management Groups allow for hierarchical management of multiple subscriptions. Option 1: Resource",
          "opciones": [
            "Option 3: Azure AD",
            "Option 4: Azure Blueprints"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Resource Management Groups provide a hierarchical structure for managing resources and subscriptions, enabling efﬁcient organization and governance.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nManagement Groups allow for hierarchical management of multiple subscriptions. Option 1: Resource\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Management Groups allow for hierarchical en Azure.\n\n### Opciones\nA. Option 3: Azure AD - Correcta\nB. Option 4: Azure Blueprints - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 16,
          "pregunta_original": "Which Azure service would best meet this requirement? Option 1: Azure Trafﬁc Manager",
          "pregunta_traducida": "¿Cuál Azure service would best meet this requirement? Option 1: Azure Trafﬁc Manager",
          "opciones": [
            "Option 3: Azure Application Gateway",
            "Option 4: Azure Load Balancer"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Front Door is designed for global load balancing, providing high availability and performance by distributing user trafﬁc across multiple regions.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cuál Azure service would best meet this requirement? Option 1: Azure Trafﬁc Manager\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Which Azure service would best en Azure.\n\n### Opciones\nA. Option 3: Azure Application Gateway - Correcta\nB. Option 4: Azure Load Balancer - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 17,
          "pregunta_original": "premises data center and Azure. What Azure service would you recommend? Option 1: Azure ExpressRoute",
          "pregunta_traducida": "premises data center and Azure. What Azure service would you recommend? Option 1: Azure ExpressRoute",
          "opciones": [
            "Option 3: Azure Virtual Network",
            "Option 4: Azure Hybrid Connections"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute of fers a dedicated, private connection between on-premises data centers and Azure, ensuring secure and reliable hybrid network conﬁgurations.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\npremises data center and Azure. What Azure service would you recommend? Option 1: Azure ExpressRoute\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre premises data center and Azure. en Azure.\n\n### Opciones\nA. Option 3: Azure Virtual Network - Correcta\nB. Option 4: Azure Hybrid Connections - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 26,
          "pregunta_original": "What are the beneﬁts of using Azure Reserved VM Instances in cost management and capacity planning? Option 1: Cost savings",
          "pregunta_traducida": "What are the beneﬁts of using Azure Reserved VM Instances in cost management and capacity planning? Option 1: Cost savings",
          "opciones": [
            "Option 3: Dynamic scaling",
            "Option 4: Pay-as-you-go pricing"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Reserved VM Instances provide cost savings by allowing users to commit to a one- or three-year term, reducing costs compared to pay-as-you-go pricing.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nWhat are the beneﬁts of using Azure Reserved VM Instances in cost management and capacity planning? Option 1: Cost savings\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What are the beneﬁts of en Azure.\n\n### Opciones\nA. Option 3: Dynamic scaling - Correcta\nB. Option 4: Pay-as-you-go pricing - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 30,
          "pregunta_original": "for tasks like conﬁguration management and script execution. Option 1: Scripting",
          "pregunta_traducida": "for tasks like conﬁguration management and script execution. Option 1: Scripting",
          "opciones": [
            "Option 3: Extension",
            "Option 4: Automation"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Virtual Machines support Extensions, which are small applications that provide post-deployment conﬁguration and automation tasks, enhancing the VM's functionality .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nfor tasks like conﬁguration management and script execution. Option 1: Scripting\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre for tasks like conﬁguration management en Azure.\n\n### Opciones\nA. Option 3: Extension - Correcta\nB. Option 4: Automation - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 31,
          "pregunta_original": "The Azure _______ service is used for large-scale, parallel data processing scenarios. Option 1: Data Lake",
          "pregunta_traducida": "The Azure _______ service is used for large-scale, parallel data processing scenarios. Option 1: Data Lake",
          "opciones": [
            "Option 3: HDInsight",
            "Option 4: Stream Analytics"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Databricks is a cloud-based big data analytics platform designed for lar ge-scale data processing, making it suitable for parallel data processing scenarios.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nThe Azure _______ service is used for large-scale, parallel data processing scenarios. Option 1: Data Lake\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre The Azure _______ service is en Azure.\n\n### Opciones\nA. Option 3: HDInsight - Correcta\nB. Option 4: Stream Analytics - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 33,
          "pregunta_original": "ensures that data is replicated across multiple data centers. Option 1: Locally Redundant",
          "pregunta_traducida": "ensures that data is replicated across multiple data centers. Option 1: Locally Redundant",
          "opciones": [
            "Option 3: Zone Redundant",
            "Option 4: Read-Access"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Geo-Redundant Storage (GRS) in Azure ensures data durability by replicating it across multiple data centers in dif ferent geographic regions, providing high availability .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nensures that data is replicated across multiple data centers. Option 1: Locally Redundant\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre ensures that data is replicated en Azure.\n\n### Opciones\nA. Option 3: Zone Redundant - Correcta\nB. Option 4: Read-Access - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 35,
          "pregunta_original": "environment. Which feature would be essential to include? Option 1: Availability Sets",
          "pregunta_traducida": "environment. ¿Cuál feature would be essential to include? Option 1: Availability Sets",
          "opciones": [
            "Option 3: Azure Load Balancer",
            "Option 4: Azure Trafﬁc Manager"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Availability Sets ensure high availability by distributing VMs across multiple fault domains, minimizing downtime during planned or unplanned events.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nenvironment. ¿Cuál feature would be essential to include? Option 1: Availability Sets\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre environment. Which feature would be en Azure.\n\n### Opciones\nA. Option 3: Azure Load Balancer - Correcta\nB. Option 4: Azure Trafﬁc Manager - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 42,
          "pregunta_original": "optimizing and controlling the distribution of user trafﬁc across global Azure regions? Option 1: Azure Trafﬁc Manager",
          "pregunta_traducida": "optimizing and controlling the distribution of user trafﬁc across global Azure regions? Option 1: Azure Trafﬁc Manager",
          "opciones": [
            "Option 3: Azure Application Gateway",
            "Option 4: Azure Content Delivery Network"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Trafﬁc Manager is used to optimize and control the distribution of user trafﬁc across global Azure regions for improved performance and availability .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\noptimizing and controlling the distribution of user trafﬁc across global Azure regions? Option 1: Azure Trafﬁc Manager\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre optimizing and controlling the distribution en Azure.\n\n### Opciones\nA. Option 3: Azure Application Gateway - Correcta\nB. Option 4: Azure Content Delivery Network - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "servicios_computo": {
      "descripcion": "Virtual Machines, Functions, App Services",
      "preguntas": [
        {
          "id": 20,
          "pregunta_original": "automatic scaling of compute resources based on demand? Option 1: Azure Load Balancer",
          "pregunta_traducida": "automatic scaling of compute resources based on demand? Option 1: Azure Balanceador de Carga",
          "opciones": [
            "Option 3: Azure Virtual Network",
            "Option 4: Azure Resource Manager"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Auto Scaling enables automatic adjustment of compute resources based on demand, ensuring optimal performance and cost efﬁciency .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nautomatic scaling of compute resources based on demand? Option 1: Azure Balanceador de Carga\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre automatic scaling of compute resources en Azure.\n\n### Opciones\nA. Option 3: Azure Virtual Network - Correcta\nB. Option 4: Azure Resource Manager - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 23,
          "pregunta_original": "What is the main advantage of using Azure Managed Disks with Azure Virtual Machines? Option 1: Simpliﬁed disk management and maintenance",
          "pregunta_traducida": "¿Qué es the main advantage of using Azure Managed Disks with Azure Máquina Virtuals? Option 1: Simpliﬁed disk management and maintenance",
          "opciones": [
            "Option 3: Increased VM performance",
            "Option 4: Better network connectivity"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Managed Disks simplify disk management, of fering ease of maintenance and scalability for virtual machines, reducing administrative overhead.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the main advantage of using Azure Managed Disks with Azure Máquina Virtuals? Option 1: Simpliﬁed disk management and maintenance\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the main advantage en Azure.\n\n### Opciones\nA. Option 3: Increased VM performance - Correcta\nB. Option 4: Better network connectivity - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 27,
          "pregunta_original": "Describe how Azure Disk Encryption secures data on Azure Virtual Machines. Option 1: Encrypts OS and data disks",
          "pregunta_traducida": "Describe how Azure Disk Encryption secures data on Azure Máquina Virtuals. Option 1: Encrypts OS and data disks",
          "opciones": [
            "Option 3: Provides ﬁrewall protection",
            "Option 4: Monitors disk performance"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Disk Encryption secures data on Azure Virtual Machines by encrypting both the OS and data disks, safeguarding sensitive information from unauthorized access.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nDescribe how Azure Disk Encryption secures data on Azure Máquina Virtuals. Option 1: Encrypts OS and data disks\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Describe how Azure Disk Encryption en Azure.\n\n### Opciones\nA. Option 3: Provides ﬁrewall protection - Correcta\nB. Option 4: Monitors disk performance - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 28,
          "pregunta_original": "Azure _______ provides a serverless ﬁle system that can be shared by Azure Virtual Machines. Option 1: Blob Storage",
          "pregunta_traducida": "Azure _______ provides a serverless ﬁle system that can be shared by Azure Máquina Virtuals. Option 1: Blob Almacenamiento",
          "opciones": [
            "Option 3: Table Storage",
            "Option 4: Queue Storage"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure File Storage is designed to provide a serverless ﬁle system that can be shared among Azure Virtual Machines, making it suitable for scenarios that require shared ﬁle access.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure _______ provides a serverless ﬁle system that can be shared by Azure Máquina Virtuals. Option 1: Blob Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure _______ provides a serverless en Azure.\n\n### Opciones\nA. Option 3: Table Storage - Correcta\nB. Option 4: Queue Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 37,
          "pregunta_original": "What is the primary function of Azure Virtual Networks in Azure Networking? Option 1: Network Isolation and Segmentation",
          "pregunta_traducida": "¿Qué es the primary function of Azure Red Virtuals in Azure Networking? Option 1: Network Isolation and Segmentation",
          "opciones": [
            "Option 3: Data Backup and Recovery",
            "Option 4: Code Deployment"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Virtual Networks provide network isolation and segmentation, allowing you to logically isolate and segment resources within your Azure environment for enhanced security and performance.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the primary function of Azure Red Virtuals in Azure Networking? Option 1: Network Isolation and Segmentation\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the primary function en Azure.\n\n### Opciones\nA. Option 3: Data Backup and Recovery - Correcta\nB. Option 4: Code Deployment - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 41,
          "pregunta_original": "What is the role of Azure Active Directory in Azure Security Basics for identity management? Option 1: Manages virtual machines",
          "pregunta_traducida": "¿Qué es the role of Azure Active Directory in Azure Seguridad Basics for identity management? Option 1: Manages virtual machines",
          "opciones": [
            "Option 3: Manages identities and authentication",
            "Option 4: Manages storage accounts"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure AD plays a crucial role in identity management and authentication, ensuring secure access to Azure resources.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Qué es the role of Azure Active Directory in Azure Seguridad Basics for identity management? Option 1: Manages virtual machines\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What is the role of en Azure.\n\n### Opciones\nA. Option 3: Manages identities and authentication - Correcta\nB. Option 4: Manages storage accounts - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "almacenamiento": {
      "descripcion": "Storage Accounts, Blob, File, Disk Storage",
      "preguntas": [
        {
          "id": 19,
          "pregunta_original": "What type of storage is typically used for high- performance scenarios in Azure Storage Solutions? Option 1: Azure Premium Storage",
          "pregunta_traducida": "What type of storage is typically used for high- performance scenarios in Azure Almacenamiento Solutions? Option 1: Azure Premium Almacenamiento",
          "opciones": [
            "Option 3: Azure Blob Storage",
            "Option 4: Azure Table Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Premium Storage is designed for high-performance scenarios, providing low-latency , high-throughput storage for applications with demanding requirements.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nWhat type of storage is typically used for high- performance scenarios in Azure Almacenamiento Solutions? Option 1: Azure Premium Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What type of storage is en Azure.\n\n### Opciones\nA. Option 3: Azure Blob Storage - Correcta\nB. Option 4: Azure Table Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 21,
          "pregunta_original": "highly available, and massively scalable cloud storage solution. Option 1: Azure Blob Storage",
          "pregunta_traducida": "highly available, and massively scalable cloud storage solution. Option 1: Azure Blob Almacenamiento",
          "opciones": [
            "Option 3: Azure Queue Storage",
            "Option 4: Azure File Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Blob Storage is a robust and scalable cloud storage solution, of fering durability , high availability , and massive scalability for various types of data.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nhighly available, and massively scalable cloud storage solution. Option 1: Azure Blob Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre highly available, and massively scalable en Azure.\n\n### Opciones\nA. Option 3: Azure Queue Storage - Correcta\nB. Option 4: Azure File Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 22,
          "pregunta_original": "Storage in terms of structure and accessibility? Option 1: Blob Storage is for unstructured data and accessed via REST APIs",
          "pregunta_traducida": "Almacenamiento in terms of structure and accessibility? Option 1: Blob Almacenamiento is for unstructured data and accessed via REST APIs",
          "opciones": [
            "Option 3: Blob Storage is suitable for database storage",
            "Option 4: File Storage is optimized for lar ge media ﬁles"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Blob Storage is designed for unstructured data and is accessed through REST  APIs, making it ideal for various data types and scalable storage.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAlmacenamiento in terms of structure and accessibility? Option 1: Blob Almacenamiento is for unstructured data and accessed via REST APIs\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Storage in terms of structure en Azure.\n\n### Opciones\nA. Option 3: Blob Storage is suitable for database storage - Correcta\nB. Option 4: File Storage is optimized for lar ge media ﬁles - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 24,
          "pregunta_original": "In Azure Storage Solutions, what role does Azure Queue Storage play in application architecture? Option 1: Message broker for communication between components",
          "pregunta_traducida": "En Azure Almacenamiento Solutions, what role does Azure Queue Almacenamiento play in application architecture? Option 1: Message broker for communication between components",
          "opciones": [
            "Option 3: Cache for frequently accessed data",
            "Option 4: Backup storage for databases"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Queue Storage acts as a message broker , facilitating communication between dif ferent components of an application by storing and managing messages in a queue.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Almacenamiento Solutions, what role does Azure Queue Almacenamiento play in application architecture? Option 1: Message broker for communication between components\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Storage Solutions, what en Azure.\n\n### Opciones\nA. Option 3: Cache for frequently accessed data - Correcta\nB. Option 4: Backup storage for databases - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 25,
          "pregunta_original": "Explain how Azure Storage Service Encryption (SSE) enhances data security. Option 1: SSE encrypts data at rest",
          "pregunta_traducida": "Explain how Azure Almacenamiento Service Encryption (SSE) enhances data security. Option 1: SSE encrypts data at rest",
          "opciones": [
            "Option 3: SSE encrypts data in memory",
            "Option 4: SSE encrypts data during processing"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Storage Service Encryption (SSE) enhances data security by encrypting data at rest, ensuring that even if unauthorized access occurs, the data remains protected.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nExplain how Azure Almacenamiento Service Encryption (SSE) enhances data security. Option 1: SSE encrypts data at rest\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Explain how Azure Storage Service en Azure.\n\n### Opciones\nA. Option 3: SSE encrypts data in memory - Correcta\nB. Option 4: SSE encrypts data during processing - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 29,
          "pregunta_original": "In Azure Storage Solutions, the _______ tier is optimized for storing data that is accessed infrequently. Option 1: Hot",
          "pregunta_traducida": "En Azure Almacenamiento Solutions, the _______ tier is optimized for storing data that is accessed infrequently. Option 1: Hot",
          "opciones": [
            "Option 3: Archive",
            "Option 4: Standard"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: The Archive tier in Azure Storage Solutions is optimized for storing data that is accessed infrequently , providing a cost-ef fective solution for archival storage needs.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Almacenamiento Solutions, the _______ tier is optimized for storing data that is accessed infrequently. Option 1: Hot\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Storage Solutions, the en Azure.\n\n### Opciones\nA. Option 3: Archive - Correcta\nB. Option 4: Standard - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 34,
          "pregunta_original": "must be preserved for a long period. Which Azure storage service should they choose? Option 1: Azure Blob Storage",
          "pregunta_traducida": "must be preserved for a long period. ¿Cuál Azure storage service should they choose? Option 1: Azure Blob Almacenamiento",
          "opciones": [
            "Option 3: Azure Queue Storage",
            "Option 4: Azure Table Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Blob Storage is the optimal choice for cold data due to its cost-ef fectiveness and ability to store lar ge amounts of unstructured data for long durations.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nmust be preserved for a long period. ¿Cuál Azure storage service should they choose? Option 1: Azure Blob Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre must be preserved for a en Azure.\n\n### Opciones\nA. Option 3: Azure Queue Storage - Correcta\nB. Option 4: Azure Table Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 36,
          "pregunta_original": "Azure storage option that provides low latency and high throughput. What would be the best choice? Option 1: Azure Premium Storage",
          "pregunta_traducida": "Azure storage option that provides low latency and high throughput. What would be the best choice? Option 1: Azure Premium Almacenamiento",
          "opciones": [
            "Option 3: Azure Blob Storage",
            "Option 4: Azure Disk Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Premium Storage is designed for data-intensive applications, of fering low latency and high throughput by using SSDs, making it suitable for performance-critical workloads.",
          "codigo_ejemplo": "\n```python\nfrom azure.storage.blob import BlobServiceClient\nimport os\n\n# Conectar al servicio de almacenamiento\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n\n# Crear un contenedor\ncontainer_name = \"mycontainer\"\ncontainer_client = blob_service_client.create_container(container_name)\n\n# Subir un archivo\nwith open(\"sample.txt\", \"rb\") as data:\n    blob_client = container_client.upload_blob(name=\"sample.txt\", data=data)\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure storage option that provides low latency and high throughput. What would be the best choice? Option 1: Azure Premium Almacenamiento\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure storage option that provides en Azure.\n\n### Opciones\nA. Option 3: Azure Blob Storage - Correcta\nB. Option 4: Azure Disk Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "redes": {
      "descripcion": "Virtual Networks, Load Balancers, Gateways",
      "preguntas": [
        {
          "id": 3,
          "pregunta_original": "the network topology of applications in Azure Architecture. Option 1: Azure Virtual Network",
          "pregunta_traducida": "the network topology of applications in Azure Architecture. Option 1: Azure Red Virtual",
          "opciones": [
            "Option 3: Azure Logic Apps",
            "Option 4: Azure Cosmos DB"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Virtual Network allows you to deﬁne the network topology of applications in Azure. It provides isolation, segmentation, and connectivity for your Azure resources. Azure Functions, Logic Apps, and Cosmos DB serve dif ferent purposes.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nthe network topology of applications in Azure Architecture. Option 1: Azure Red Virtual\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre the network topology of applications en Azure.\n\n### Opciones\nA. Option 3: Azure Logic Apps - Correcta\nB. Option 4: Azure Cosmos DB - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 9,
          "pregunta_original": "What role does Azure Trafﬁc Manager play in Azure's global networking architecture? Option 1: Distributing incoming network trafﬁc across multiple servers",
          "pregunta_traducida": "What role does Azure Trafﬁc Manager play in Azure's global networking architecture? Option 1: Distributing incoming network trafﬁc across multiple servers",
          "opciones": [
            "Option 3: Ensuring data security in transit",
            "Option 4: Optimizing database queries"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Trafﬁc Manager contributes to global networking by distributing incoming trafﬁc across multiple servers, enhancing availability and responsiveness.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nWhat role does Azure Trafﬁc Manager play in Azure's global networking architecture? Option 1: Distributing incoming network trafﬁc across multiple servers\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre What role does Azure Trafﬁc en Azure.\n\n### Opciones\nA. Option 3: Ensuring data security in transit - Correcta\nB. Option 4: Optimizing database queries - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 10,
          "pregunta_original": "Describe how Azure's ExpressRoute enhances connectivity between on-premises networks and Azure. Option 1: Dedicated Network Connection",
          "pregunta_traducida": "Describe how Azure's ExpressRoute enhances connectivity between on-premises networks and Azure. Option 1: Dedicated Network Connection",
          "opciones": [
            "Option 3: Public Internet Connection",
            "Option 4: Load Balancing"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute provides a dedicated network connection, bypassing the public internet, ensuring secure, low-latency communication between on-premises networks and Azure resources.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nDescribe how Azure's ExpressRoute enhances connectivity between on-premises networks and Azure. Option 1: Dedicated Network Connection\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Describe how Azure's ExpressRoute enhances en Azure.\n\n### Opciones\nA. Option 3: Public Internet Connection - Correcta\nB. Option 4: Load Balancing - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 13,
          "pregunta_original": "hybrid networks between on-premises data centers and Azure. Option 1: Hybrid",
          "pregunta_traducida": "hybrid networks between on-premises data centers and Azure. Option 1: Hybrid",
          "opciones": [
            "Option 3: VPN",
            "Option 4: Connectivity"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure VPN Gateway facilitates secure and reliable hybrid network connections between on-premises data centers and Azure.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nhybrid networks between on-premises data centers and Azure. Option 1: Hybrid\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre hybrid networks between on-premises data en Azure.\n\n### Opciones\nA. Option 3: VPN - Correcta\nB. Option 4: Connectivity - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 32,
          "pregunta_original": "should implement Azure _______ Network Security Groups. Option 1: Subnet",
          "pregunta_traducida": "should implement Azure _______ Network Seguridad Groups. Option 1: Subnet",
          "opciones": [
            "Option 3: Inbound",
            "Option 4: Outbound"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Network Security Groups (NSGs) are used to control inbound and outbound trafﬁc to network interfaces, enhancing the security posture of Azure Virtual Machines.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nshould implement Azure _______ Network Seguridad Groups. Option 1: Subnet\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre should implement Azure _______ Network en Azure.\n\n### Opciones\nA. Option 3: Inbound - Correcta\nB. Option 4: Outbound - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 39,
          "pregunta_original": "interconnection of Azure resources in a secure and private environment. Option 1: Azure Virtual Network",
          "pregunta_traducida": "interconnection of Azure resources in a secure and private environment. Option 1: Azure Red Virtual",
          "opciones": [
            "Option 3: Azure Blob Storage",
            "Option 4: Azure SQL  Database"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Virtual Network enables the secure and private interconnection of Azure resources, providing a dedicated and isolated environment for communication.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\ninterconnection of Azure resources in a secure and private environment. Option 1: Azure Red Virtual\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre interconnection of Azure resources in en Azure.\n\n### Opciones\nA. Option 3: Azure Blob Storage - Correcta\nB. Option 4: Azure SQL  Database - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 40,
          "pregunta_original": "How does Azure Network Security Group (NSG) contribute to network security in Azure Networking? Option 1: Filters network trafﬁc",
          "pregunta_traducida": "¿Cómo Azure Network Seguridad Group (NSG) contribute to network security in Azure Networking? Option 1: Filters network trafﬁc",
          "opciones": [
            "Option 3: Creates virtual networks",
            "Option 4: Monitors Azure resources"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure NSG ﬁlters and controls incoming and outgoing network trafﬁc, providing a layer of security by deﬁning rules for communication.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cómo Azure Network Seguridad Group (NSG) contribute to network security in Azure Networking? Option 1: Filters network trafﬁc\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre How does Azure Network Security en Azure.\n\n### Opciones\nA. Option 3: Creates virtual networks - Correcta\nB. Option 4: Monitors Azure resources - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 43,
          "pregunta_original": "Describe the purpose of Azure ExpressRoute in enhancing network connectivity and performance. Option 1: Private dedicated network connection",
          "pregunta_traducida": "Describe the purpose of Azure ExpressRoute in enhancing network connectivity and performance. Option 1: Private dedicated network connection",
          "opciones": [
            "Option 3: Load balancing for web applications",
            "Option 4: Azure VPN Gateway"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute provides a private, dedicated connection between on-premises data centers and Azure, enhancing network connectivity and performance by bypassing the public internet.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nDescribe the purpose of Azure ExpressRoute in enhancing network connectivity and performance. Option 1: Private dedicated network connection\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Describe the purpose of Azure en Azure.\n\n### Opciones\nA. Option 3: Load balancing for web applications - Correcta\nB. Option 4: Azure VPN Gateway - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 45,
          "pregunta_original": "protecting web applications from common web vulnerabilities? Option 1: Content Delivery Network (CDN)",
          "pregunta_traducida": "protecting web applications from common web vulnerabilities? Option 1: Content Delivery Network (CDN)",
          "opciones": [
            "Option 3: Load Balancer",
            "Option 4: Azure API Management"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Application Gateway includes a Web Application Firewall (W AF) that protects web applications from common vulnerabilities by ﬁltering and monitoring HTTP  trafﬁc between the internet and the application.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nprotecting web applications from common web vulnerabilities? Option 1: Content Delivery Network (CDN)\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre protecting web applications from common en Azure.\n\n### Opciones\nA. Option 3: Load Balancer - Correcta\nB. Option 4: Azure API Management - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 48,
          "pregunta_original": "management of network trafﬁc rules across multiple subscriptions and virtual networks. Option 1: Network Security Group",
          "pregunta_traducida": "management of network trafﬁc rules across multiple subscriptions and virtual networks. Option 1: Network Seguridad Group",
          "opciones": [
            "Option 3: Azure Bastion",
            "Option 4: Application Gateway"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Firewall enables centralized management of network trafﬁc rules, ensuring consistent security policies across various subscriptions and virtual networks.",
          "codigo_ejemplo": "\n```json\n{\n  \"$schema\": \"https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#\",\n  \"contentVersion\": \"1.0.0.0\",\n  \"resources\": [\n    {\n      \"type\": \"Microsoft.Network/virtualNetworks\",\n      \"apiVersion\": \"2021-05-01\",\n      \"name\": \"myVNet\",\n      \"location\": \"[resourceGroup().location]\",\n      \"properties\": {\n        \"addressSpace\": {\n          \"addressPrefixes\": [\"10.0.0.0/16\"]\n        },\n        \"subnets\": [\n          {\n            \"name\": \"default\",\n            \"properties\": {\n              \"addressPrefix\": \"10.0.0.0/24\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nmanagement of network trafﬁc rules across multiple subscriptions and virtual networks. Option 1: Network Seguridad Group\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre management of network trafﬁc rules en Azure.\n\n### Opciones\nA. Option 3: Azure Bastion - Correcta\nB. Option 4: Application Gateway - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 49,
          "pregunta_original": "Azure _______ Insights provides comprehensive network monitoring and analytics. Option 1: Application",
          "pregunta_traducida": "Azure _______ Insights provides comprehensive network monitoring and analytics. Option 1: Application",
          "opciones": [
            "Option 3: Security",
            "Option 4: Performance"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Network Insights is a service focused on providing detailed monitoring and analytics for network-related activities in Azure. It helps in optimizing and securing network performance.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nAzure _______ Insights provides comprehensive network monitoring and analytics. Option 1: Application\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Azure _______ Insights provides comprehensive en Azure.\n\n### Opciones\nA. Option 3: Security - Correcta\nB. Option 4: Performance - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "seguridad": {
      "descripcion": "Identity, Authentication, Authorization, Key Vault",
      "preguntas": [
        {
          "id": 12,
          "pregunta_original": "Explain the role of Azure's Front Door service in optimizing web application performance and security. Option 1: Load Balancing",
          "pregunta_traducida": "Explain the role of Azure's Front Door service in optimizing web application performance and security. Option 1: Load Balancing",
          "opciones": [
            "Option 3: Content Delivery Network (CDN)",
            "Option 4: Authentication Service"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Front Door optimizes web application performance by leveraging Content Delivery Network (CDN) capabilities, ensuring faster content delivery globally while also enhancing security .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nExplain the role of Azure's Front Door service in optimizing web application performance and security. Option 1: Load Balancing\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre Explain the role of Azure's en Azure.\n\n### Opciones\nA. Option 3: Content Delivery Network (CDN) - Correcta\nB. Option 4: Authentication Service - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 18,
          "pregunta_original": "uniﬁed security management system. Which Azure service would be the most appropriate? Option 1: Azure Security Center",
          "pregunta_traducida": "uniﬁed security management system. ¿Cuál Azure service would be the most appropriate? Option 1: Azure Seguridad Center",
          "opciones": [
            "Option 3: Azure Sentinel",
            "Option 4: Azure Active Directory"
          ],
          "respuesta_correcta": "Correct Response: 3.0",
          "explicacion": "Explanation: Azure Sentinel is a cloud-native SIEM (Security Information and Event Management) service that provides advanced threat protection, detection of suspicious activities, and uniﬁed security management for global enterprises.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nuniﬁed security management system. ¿Cuál Azure service would be the most appropriate? Option 1: Azure Seguridad Center\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre uniﬁed security management system. Which en Azure.\n\n### Opciones\nA. Option 3: Azure Sentinel - Correcta\nB. Option 4: Azure Active Directory - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 38,
          "pregunta_original": "In Azure Security Basics, which tool is used primarily for detecting and responding to security threats? Option 1: Azure Security Center",
          "pregunta_traducida": "En Azure Seguridad Basics, which tool is used primarily for detecting and responding to security threats? Option 1: Azure Seguridad Center",
          "opciones": [
            "Option 3: Azure Key Vault",
            "Option 4: Azure Blob Storage"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Security Center is the primary tool used for detecting and responding to security threats in Azure. It provides advanced threat protection across your Azure workloads.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Seguridad Basics, which tool is used primarily for detecting and responding to security threats? Option 1: Azure Seguridad Center\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Security Basics, which en Azure.\n\n### Opciones\nA. Option 3: Azure Key Vault - Correcta\nB. Option 4: Azure Blob Storage - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 44,
          "pregunta_original": "How does Azure Sentinel aid in enterprise-level security management and threat detection? Option 1: Machine Learning for anomaly detection",
          "pregunta_traducida": "¿Cómo Azure Sentinel aid in enterprise-level security management and threat detection? Option 1: Machine Learning for anomaly detection",
          "opciones": [
            "Option 3: Network ﬁrewall conﬁguration",
            "Option 4: Identity and Access Management (IAM)"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Sentinel acts as a centralized SIEM tool, leveraging advanced analytics and machine learning for security management and threat detection across the enterprise.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\n¿Cómo Azure Sentinel aid in enterprise-level security management and threat detection? Option 1: Machine Learning for anomaly detection\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre How does Azure Sentinel aid en Azure.\n\n### Opciones\nA. Option 3: Network ﬁrewall conﬁguration - Correcta\nB. Option 4: Identity and Access Management (IAM) - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 46,
          "pregunta_original": "connection to Azure that enhances data privacy and security. Option 1: ExpressRoute",
          "pregunta_traducida": "connection to Azure that enhances data privacy and security. Option 1: ExpressRoute",
          "opciones": [
            "Option 3: Direct Connect",
            "Option 4: PrivateLink"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure ExpressRoute provides a dedicated and private connection to Azure through a ﬁber network, ensuring enhanced data privacy and security .",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nconnection to Azure that enhances data privacy and security. Option 1: ExpressRoute\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre connection to Azure that enhances en Azure.\n\n### Opciones\nA. Option 3: Direct Connect - Correcta\nB. Option 4: PrivateLink - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 47,
          "pregunta_original": "In Azure Security Basics, Azure _______ is crucial for protecting data at rest through encryption. Option 1: Key Vault",
          "pregunta_traducida": "En Azure Seguridad Basics, Azure _______ is crucial for protecting data at rest through encryption. Option 1: Key Vault",
          "opciones": [
            "Option 3: Sentinel",
            "Option 4: Security Center"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Key Vault is crucial for protecting data at rest by managing and safeguarding cryptographic keys, secrets, and certiﬁcates through encryption.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Seguridad Basics, Azure _______ is crucial for protecting data at rest through encryption. Option 1: Key Vault\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Security Basics, Azure en Azure.\n\n### Opciones\nA. Option 3: Sentinel - Correcta\nB. Option 4: Security Center - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        },
        {
          "id": 50,
          "pregunta_original": "In Azure Security Basics, _______ is a key service for managing the security posture of Azure resources. Option 1: Azure Defender",
          "pregunta_traducida": "En Azure Seguridad Basics, _______ is a key service for managing the security posture of Azure resources. Option 1: Azure Defender",
          "opciones": [
            "Option 3: Key Vault",
            "Option 4: Policy"
          ],
          "respuesta_correcta": "Correct Response: 2.0",
          "explicacion": "Explanation: Azure Security Center is a vital service that helps manage and enhance the overall security posture of Azure resources. It provides threat protection across workloads.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure Seguridad Basics, _______ is a key service for managing the security posture of Azure resources. Option 1: Azure Defender\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure Security Basics, _______ en Azure.\n\n### Opciones\nA. Option 3: Key Vault - Correcta\nB. Option 4: Policy - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "monitoreo": {
      "descripcion": "Monitor, Log Analytics, Alerts, Insights",
      "preguntas": [
        {
          "id": 2,
          "pregunta_original": "In Azure, which feature allows you to organize resources into logical groups for easy management? Option 1: Resource Groups",
          "pregunta_traducida": "En Azure, which feature allows you to organize resources into logical groups for easy management? Option 1: Grupo de Recursoss",
          "opciones": [
            "Option 3: Azure Active Directory",
            "Option 4: Azure Key Vault"
          ],
          "respuesta_correcta": "Correct Response: 1.0",
          "explicacion": "Explanation: Azure Resource Groups are used to or ganize and manage Azure resources ef fectively . They provide a way to manage and apply policies and access control to a group of resources. Virtual Networks, Azure Active Directory , and Azure Key Vault serve dif ferent purposes in Azure.",
          "codigo_ejemplo": "\n```python\n# Ejemplo básico de Azure SDK\nfrom azure.identity import DefaultAzureCredential\nfrom azure.mgmt.resource import ResourceManagementClient\n\n# Autenticación\ncredential = DefaultAzureCredential()\nsubscription_id = \"your-subscription-id\"\n\n# Cliente de recursos\nresource_client = ResourceManagementClient(credential, subscription_id)\n\n# Listar grupos de recursos\nresource_groups = resource_client.resource_groups.list()\nfor group in resource_groups:\n    print(f\"Grupo: {group.name}, Ubicación: {group.location}\")\n```",
          "pruebas_unitarias": "\n```python\nimport unittest\nfrom unittest.mock import Mock, patch\n\nclass TestAzureService(unittest.TestCase):\n    \n    def setUp(self):\n        # Configuración inicial para las pruebas\n        self.mock_client = Mock()\n    \n    def test_service_creation(self):\n        # Prueba la creación del servicio\n        # Arrange\n        expected_name = \"test-service\"\n        \n        # Act\n        result = self.mock_client.create_service(expected_name)\n        \n        # Assert\n        self.mock_client.create_service.assert_called_once_with(expected_name)\n    \n    def test_service_configuration(self):\n        # Prueba la configuración del servicio\n        # Arrange\n        config = {\"setting1\": \"value1\", \"setting2\": \"value2\"}\n        \n        # Act\n        self.mock_client.configure_service(config)\n        \n        # Assert\n        self.mock_client.configure_service.assert_called_once_with(config)\n    \n    def test_error_handling(self):\n        # Prueba el manejo de errores\n        # Arrange\n        self.mock_client.create_service.side_effect = Exception(\"Service error\")\n        \n        # Act & Assert\n        with self.assertRaises(Exception):\n            self.mock_client.create_service(\"test\")\n\nif __name__ == '__main__':\n    unittest.main()\n```",
          "explicacion_linea_por_linea": "\n## Explicación Línea por Línea\n\n### Pregunta\nEn Azure, which feature allows you to organize resources into logical groups for easy management? Option 1: Grupo de Recursoss\n\n### Análisis\nEsta pregunta evalúa el conocimiento sobre In Azure, which feature allows en Azure.\n\n### Opciones\nA. Option 3: Azure Active Directory - Correcta\nB. Option 4: Azure Key Vault - Incorrecta\n",
          "mejoras_sugeridas": [
            "Implementar monitoreo adicional",
            "Considerar alta disponibilidad",
            "Aplicar mejores prácticas de seguridad",
            "Optimizar costos"
          ]
        }
      ]
    },
    "devops": {
      "descripcion": "Pipelines, Deployment, CI/CD, Automation",
      "preguntas": []
    }
  }
}