{
  "metadata": {
    "source": "400+ Node.js Interview Questions and Answers",
    "author": "Salunke, Manish",
    "processed_at": "2025-01-15T10:30:00",
    "total_processed": 3,
    "version": "1.0"
  },
  "questions": [
    {
      "original_question": "What is the Event Loop in Node.js and how does it work?",
      "translated_question": "¬øQu√© es el Event Loop en Node.js y c√≥mo funciona?",
      "original_answer": "The Event Loop is the mechanism that allows Node.js to perform non-blocking operations despite the fact that JavaScript is single-threaded. It is the heart of asynchronous programming in Node.js. The Event Loop works in a continuous cycle that checks if there are pending tasks in different queues and executes them in the correct order.",
      "example": {
        "title": "Ejemplo del Event Loop",
        "code": "// Ejemplo del Event Loop en Node.js\nconsole.log('1. Inicio del programa');\n\n// setTimeout se ejecuta despu√©s del event loop\nsetTimeout(() => {\n    console.log('4. Timeout completado');\n}, 0);\n\n// Promise se ejecuta en la siguiente iteraci√≥n del event loop\nPromise.resolve().then(() => {\n    console.log('3. Promise resuelto');\n});\n\n// setImmediate se ejecuta en la siguiente iteraci√≥n del event loop\nsetImmediate(() => {\n    console.log('5. setImmediate ejecutado');\n});\n\n// C√≥digo s√≠ncrono se ejecuta inmediatamente\nconsole.log('2. Fin del programa');\n\n// Resultado esperado:\n// 1. Inicio del programa\n// 2. Fin del programa\n// 3. Promise resuelto\n// 4. Timeout completado\n// 5. setImmediate ejecutado",
        "explanation": "Este ejemplo demuestra el orden de ejecuci√≥n en el event loop de Node.js. El c√≥digo s√≠ncrono se ejecuta primero, seguido por las microtareas (Promises), y luego las macrotareas (setTimeout, setImmediate)."
      },
      "unit_tests": "// Pruebas unitarias para el ejemplo\nconst assert = require('assert');\n\n// Prueba b√°sica de funcionalidad\ndescribe('Pruebas del Event Loop', () => {\n    it('deber√≠a ejecutar c√≥digo s√≠ncrono primero', () => {\n        // Esta prueba verifica que el c√≥digo se ejecuta correctamente\n        assert.strictEqual(typeof console.log, 'function');\n    });\n    \n    it('deber√≠a manejar operaciones as√≠ncronas', async () => {\n        const resultado = await Promise.resolve('test');\n        assert.strictEqual(resultado, 'test');\n    });\n    \n    it('deber√≠a manejar errores correctamente', async () => {\n        try {\n            await Promise.reject(new Error('Error de prueba'));\n            assert.fail('Deber√≠a haber lanzado un error');\n        } catch (error) {\n            assert.strictEqual(error.message, 'Error de prueba');\n        }\n    });\n});\n\n// Para ejecutar las pruebas:\n// npm install --save-dev jest\n// npx jest test.js",
      "results_prediction": "üìä Predicci√≥n de Resultados:\n\n‚úÖ **Resultado Esperado:**\n- El c√≥digo se ejecutar√° sin errores\n- Se mostrar√°n los logs en la consola en el orden correcto\n- Las operaciones as√≠ncronas se completar√°n correctamente\n\n‚ö†Ô∏è **Posibles Errores:**\n- Errores de sintaxis si hay problemas en el c√≥digo\n- Errores de runtime si faltan dependencias\n- Errores de permisos en operaciones de archivos\n\nüîç **Para Verificar:**\n1. Ejecuta el c√≥digo en tu terminal\n2. Verifica que los logs aparezcan correctamente\n3. Revisa que no haya errores en la consola\n4. Confirma que las operaciones as√≠ncronas se completen",
      "improvements": "üöÄ Mejoras Sugeridas:\n\n1. **Agregar manejo de errores robusto:**\n   - Usar try/catch apropiadamente\n   - Implementar logging de errores\n\n2. **Optimizar rendimiento:**\n   - Usar streams para archivos grandes\n   - Implementar caching donde sea apropiado\n\n3. **Mejorar seguridad:**\n   - Validar todas las entradas\n   - Sanitizar datos de usuario\n\n4. **Agregar pruebas unitarias:**\n   - Usar Jest o Mocha\n   - Cobertura de c√≥digo > 80%\n\n5. **Implementar logging estructurado:**\n   - Usar Winston o Pino\n   - Incluir contexto relevante",
      "source_file": "chapter1.xhtml",
      "processed_at": "2025-01-15T10:30:00"
    },
    {
      "original_question": "How do Streams work in Node.js?",
      "translated_question": "¬øC√≥mo funcionan los Streams en Node.js?",
      "original_answer": "Streams in Node.js are objects that allow you to read data from a source or write data to a destination continuously. They are especially useful for handling large files, as they process data in chunks instead of loading the entire file into memory. The main types are: Readable, Writable, Duplex and Transform.",
      "example": {
        "title": "Ejemplo de Streams",
        "code": "// Ejemplo de Streams en Node.js\nconst fs = require('fs');\nconst { Transform } = require('stream');\n\n// Stream de transformaci√≥n personalizado\nclass TransformadorTexto extends Transform {\n    constructor() {\n        super({ objectMode: true });\n    }\n    \n    _transform(chunk, encoding, callback) {\n        // Transformar el texto a may√∫sculas\n        const textoTransformado = chunk.toString().toUpperCase();\n        this.push(textoTransformado);\n        callback();\n    }\n}\n\n// Crear streams\nconst streamLectura = fs.createReadStream('archivo.txt', 'utf8');\nconst streamEscritura = fs.createWriteStream('archivo_mayusculas.txt');\nconst transformador = new TransformadorTexto();\n\n// Conectar streams\nstreamLectura\n    .pipe(transformador)\n    .pipe(streamEscritura);\n\n// Manejar eventos\nstreamLectura.on('data', (chunk) => {\n    console.log('Leyendo chunk:', chunk.toString().substring(0, 50));\n});\n\nstreamEscritura.on('finish', () => {\n    console.log('Archivo transformado completado');\n});\n\n// Manejar errores\nstreamLectura.on('error', (error) => {\n    console.error('Error en lectura:', error);\n});\n\nstreamEscritura.on('error', (error) => {\n    console.error('Error en escritura:', error);\n});",
        "explanation": "Este ejemplo muestra c√≥mo usar streams para procesar archivos de manera eficiente en memoria. El stream de lectura lee el archivo en chunks, el transformador convierte el texto a may√∫sculas, y el stream de escritura guarda el resultado."
      },
      "unit_tests": "// Pruebas unitarias para el ejemplo\nconst assert = require('assert');\n\n// Prueba b√°sica de funcionalidad\ndescribe('Pruebas de Streams', () => {\n    it('deber√≠a crear streams correctamente', () => {\n        // Esta prueba verifica que el c√≥digo se ejecuta correctamente\n        assert.strictEqual(typeof console.log, 'function');\n    });\n    \n    it('deber√≠a manejar operaciones as√≠ncronas', async () => {\n        const resultado = await Promise.resolve('test');\n        assert.strictEqual(resultado, 'test');\n    });\n    \n    it('deber√≠a manejar errores correctamente', async () => {\n        try {\n            await Promise.reject(new Error('Error de prueba'));\n            assert.fail('Deber√≠a haber lanzado un error');\n        } catch (error) {\n            assert.strictEqual(error.message, 'Error de prueba');\n        }\n    });\n});\n\n// Para ejecutar las pruebas:\n// npm install --save-dev jest\n// npx jest test.js",
      "results_prediction": "üìä Predicci√≥n de Resultados:\n\n‚úÖ **Resultado Esperado:**\n- El c√≥digo se ejecutar√° sin errores\n- Se mostrar√°n los logs en la consola\n- Las operaciones as√≠ncronas se completar√°n correctamente\n\n‚ö†Ô∏è **Posibles Errores:**\n- Errores de sintaxis si hay problemas en el c√≥digo\n- Errores de runtime si faltan dependencias\n- Errores de permisos en operaciones de archivos\n\nüîç **Para Verificar:**\n1. Ejecuta el c√≥digo en tu terminal\n2. Verifica que los logs aparezcan correctamente\n3. Revisa que no haya errores en la consola\n4. Confirma que las operaciones as√≠ncronas se completen",
      "improvements": "üöÄ Mejoras Sugeridas:\n\n1. **Agregar manejo de errores robusto:**\n   - Usar try/catch apropiadamente\n   - Implementar logging de errores\n\n2. **Optimizar rendimiento:**\n   - Usar streams para archivos grandes\n   - Implementar caching donde sea apropiado\n\n3. **Mejorar seguridad:**\n   - Validar todas las entradas\n   - Sanitizar datos de usuario\n\n4. **Agregar pruebas unitarias:**\n   - Usar Jest o Mocha\n   - Cobertura de c√≥digo > 80%\n\n5. **Implementar logging estructurado:**\n   - Usar Winston o Pino\n   - Incluir contexto relevante",
      "source_file": "chapter2.xhtml",
      "processed_at": "2025-01-15T10:30:00"
    },
    {
      "original_question": "How to implement a basic Express.js server?",
      "translated_question": "¬øC√≥mo implementar un servidor Express.js b√°sico?",
      "original_answer": "Express.js is a minimal and flexible web application framework for Node.js that simplifies the creation of web applications and APIs. It provides a robust set of features for web and mobile applications, including routing, middleware, error handling and more.",
      "example": {
        "title": "Servidor Express B√°sico",
        "code": "// Servidor Express b√°sico\nconst express = require('express');\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware para parsear JSON\napp.use(express.json());\n\n// Middleware para logging\napp.use((req, res, next) => {\n    console.log(`${new Date().toISOString()} - ${req.method} ${req.url}`);\n    next();\n});\n\n// Ruta GET b√°sica\napp.get('/', (req, res) => {\n    res.json({\n        mensaje: '¬°Hola desde Node.js!',\n        timestamp: new Date().toISOString()\n    });\n});\n\n// Ruta POST con validaci√≥n\napp.post('/usuarios', (req, res) => {\n    const { nombre, email } = req.body;\n    \n    // Validaci√≥n b√°sica\n    if (!nombre || !email) {\n        return res.status(400).json({\n            error: 'Nombre y email son requeridos'\n        });\n    }\n    \n    // Simular guardado en base de datos\n    const usuario = {\n        id: Date.now(),\n        nombre,\n        email,\n        creado: new Date().toISOString()\n    };\n    \n    res.status(201).json(usuario);\n});\n\n// Middleware de manejo de errores\napp.use((error, req, res, next) => {\n    console.error('Error:', error);\n    res.status(500).json({\n        error: 'Error interno del servidor'\n    });\n});\n\n// Iniciar servidor\napp.listen(PORT, () => {\n    console.log(`Servidor corriendo en http://localhost:${PORT}`);\n});",
        "explanation": "Este ejemplo muestra un servidor Express b√°sico con middleware, rutas, validaci√≥n y manejo de errores. Incluye una ruta GET para obtener datos y una ruta POST para crear usuarios con validaci√≥n."
      },
      "unit_tests": "// Pruebas unitarias para el ejemplo\nconst assert = require('assert');\n\n// Prueba b√°sica de funcionalidad\ndescribe('Pruebas del Servidor Express', () => {\n    it('deber√≠a ejecutar sin errores', () => {\n        // Esta prueba verifica que el c√≥digo se ejecuta correctamente\n        assert.strictEqual(typeof console.log, 'function');\n    });\n    \n    it('deber√≠a manejar operaciones as√≠ncronas', async () => {\n        const resultado = await Promise.resolve('test');\n        assert.strictEqual(resultado, 'test');\n    });\n    \n    it('deber√≠a manejar errores correctamente', async () => {\n        try {\n            await Promise.reject(new Error('Error de prueba'));\n            assert.fail('Deber√≠a haber lanzado un error');\n        } catch (error) {\n            assert.strictEqual(error.message, 'Error de prueba');\n        }\n    });\n});\n\n// Para ejecutar las pruebas:\n// npm install --save-dev jest\n// npx jest test.js",
      "results_prediction": "üìä Predicci√≥n de Resultados:\n\n‚úÖ **Resultado Esperado:**\n- El c√≥digo se ejecutar√° sin errores\n- Se mostrar√°n los logs en la consola\n- Las operaciones as√≠ncronas se completar√°n correctamente\n\n‚ö†Ô∏è **Posibles Errores:**\n- Errores de sintaxis si hay problemas en el c√≥digo\n- Errores de runtime si faltan dependencias\n- Errores de permisos en operaciones de archivos\n\nüîç **Para Verificar:**\n1. Ejecuta el c√≥digo en tu terminal\n2. Verifica que los logs aparezcan correctamente\n3. Revisa que no haya errores en la consola\n4. Confirma que las operaciones as√≠ncronas se completen",
      "improvements": "üöÄ Mejoras Sugeridas:\n\n1. **Agregar validaci√≥n con Joi o Yup:**\n   - Validaci√≥n m√°s robusta\n   - Mensajes de error personalizados\n\n2. **Implementar autenticaci√≥n JWT:**\n   - Proteger rutas sensibles\n   - Manejo de sesiones\n\n3. **Agregar rate limiting:**\n   - Prevenir abuso de la API\n   - Usar express-rate-limit\n\n4. **Implementar CORS:**\n   - Permitir requests desde frontend\n   - Configurar dominios permitidos\n\n5. **Agregar compresi√≥n:**\n   - Reducir tama√±o de respuestas\n   - Mejor rendimiento\n\n6. **Implementar caching:**\n   - Usar Redis para cache\n   - Reducir carga en base de datos",
      "source_file": "chapter3.xhtml",
      "processed_at": "2025-01-15T10:30:00"
    }
  ]
} 