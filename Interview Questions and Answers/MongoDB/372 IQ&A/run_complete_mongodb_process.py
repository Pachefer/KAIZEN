#!/usr/bin/env python3
"""
Script para ejecutar el proceso completo de generaci√≥n de la gu√≠a de MongoDB
Este script automatiza todo el proceso desde la extracci√≥n hasta la generaci√≥n final
"""

import os
import sys
import subprocess
from pathlib import Path

def run_command(command, description):
    """
    Ejecuta un comando y maneja errores
    
    Args:
        command (str): Comando a ejecutar
        description (str): Descripci√≥n del comando
    """
    print(f"\nüöÄ {description}")
    print(f"üìù Ejecutando: {command}")
    print("-" * 50)
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print("‚úÖ Comando ejecutado exitosamente")
        if result.stdout:
            print("üì§ Salida:")
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error ejecutando comando: {e}")
        if e.stdout:
            print("üì§ Salida est√°ndar:")
            print(e.stdout)
        if e.stderr:
            print("üì§ Error est√°ndar:")
            print(e.stderr)
        return False

def check_dependencies():
    """
    Verifica que las dependencias necesarias est√©n instaladas
    """
    print("üîç Verificando dependencias...")
    
    required_packages = ['PyPDF2']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package} est√° instalado")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} no est√° instalado")
    
    if missing_packages:
        print(f"\nüì¶ Instalando paquetes faltantes: {', '.join(missing_packages)}")
        install_command = f"pip install {' '.join(missing_packages)}"
        if not run_command(install_command, "Instalando dependencias"):
            print("‚ùå Error instalando dependencias")
            return False
    
    return True

def check_files():
    """
    Verifica que los archivos necesarios existan
    """
    print("\nüìÅ Verificando archivos necesarios...")
    
    required_files = [
        "300_ MongoDB Interview Questions and Answe - Salunke, Manish.pdf"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
            print(f"‚ùå No se encontr√≥: {file}")
        else:
            print(f"‚úÖ Encontrado: {file}")
    
    if missing_files:
        print(f"\n‚ùå Archivos faltantes: {', '.join(missing_files)}")
        print("üí° Aseg√∫rate de tener el archivo PDF en el directorio correcto")
        return False
    
    return True

def run_extraction():
    """
    Ejecuta el proceso de extracci√≥n
    """
    print("\nüìñ PASO 1: Extracci√≥n de preguntas del PDF")
    print("=" * 60)
    
    if not run_command("python extract_mongodb_questions.py", "Extrayendo preguntas del PDF"):
        print("‚ùå Error en la extracci√≥n")
        return False
    
    # Verifica que se crearon los archivos de salida
    output_files = ["mongodb_questions_raw.txt", "mongodb_questions_structured.json"]
    for file in output_files:
        if Path(file).exists():
            size = Path(file).stat().st_size
            print(f"‚úÖ {file} creado ({size} bytes)")
        else:
            print(f"‚ùå {file} no se cre√≥")
            return False
    
    return True

def run_processing():
    """
    Ejecuta el proceso de procesamiento
    """
    print("\nüîÑ PASO 2: Procesamiento de preguntas")
    print("=" * 60)
    
    if not run_command("python process_mongodb_questions.py", "Procesando preguntas"):
        print("‚ùå Error en el procesamiento")
        return False
    
    # Verifica que se cre√≥ el archivo procesado
    processed_file = "mongodb_questions_processed.json"
    if Path(processed_file).exists():
        size = Path(processed_file).stat().st_size
        print(f"‚úÖ {processed_file} creado ({size} bytes)")
    else:
        print(f"‚ùå {processed_file} no se cre√≥")
        return False
    
    return True

def create_example_files():
    """
    Crea archivos de ejemplo para demostraci√≥n
    """
    print("\nüìù PASO 3: Creando archivos de ejemplo")
    print("=" * 60)
    
    # Crear directorio de ejemplos si no existe
    examples_dir = Path("ejemplos_practicos")
    examples_dir.mkdir(exist_ok=True)
    
    # Crear package.json para ejemplos
    package_json = {
        "name": "mongodb-ejemplos-practicos",
        "version": "1.0.0",
        "description": "Ejemplos pr√°cticos de MongoDB con pruebas unitarias",
        "scripts": {
            "test": "jest",
            "example:basic": "node ejemplos/01-basico.js",
            "example:aggregation": "node ejemplos/02-agregacion.js",
            "example:indexes": "node ejemplos/03-indices.js"
        },
        "dependencies": {
            "mongodb": "^5.0.0"
        },
        "devDependencies": {
            "jest": "^29.0.0",
            "mongodb-memory-server": "^9.0.0"
        }
    }
    
    import json
    with open(examples_dir / "package.json", "w") as f:
        json.dump(package_json, f, indent=2)
    
    print("‚úÖ package.json creado")
    
    # Crear README para ejemplos
    readme_content = """# üçÉ Ejemplos Pr√°cticos de MongoDB

## Instalaci√≥n
```bash
npm install
```

## Ejecutar ejemplos
```bash
npm run example:basic
npm run example:aggregation
npm run example:indexes
```

## Ejecutar pruebas
```bash
npm test
```
"""
    
    with open(examples_dir / "README.md", "w") as f:
        f.write(readme_content)
    
    print("‚úÖ README.md creado")
    
    return True

def show_final_summary():
    """
    Muestra un resumen final del proceso
    """
    print("\nüéâ PROCESO COMPLETADO EXITOSAMENTE")
    print("=" * 60)
    
    print("üìÅ Archivos generados:")
    
    files_info = [
        ("mongodb_questions_raw.txt", "Contenido extra√≠do del PDF"),
        ("mongodb_questions_structured.json", "Preguntas estructuradas"),
        ("mongodb_questions_processed.json", "Preguntas procesadas con mejoras"),
        ("Guia_MongoDB_Avanzada.md", "Gu√≠a avanzada"),
        ("ejemplos_practicos/", "Directorio de ejemplos pr√°cticos")
    ]
    
    total_size = 0
    for filename, description in files_info:
        if Path(filename).exists():
            if Path(filename).is_file():
                size = Path(filename).stat().st_size
                size_kb = size / 1024
                total_size += size
                print(f"   üìÑ {filename} ({size_kb:.1f} KB) - {description}")
            else:
                print(f"   üìÅ {filename} - {description}")
    
    if total_size > 0:
        total_size_mb = total_size / (1024 * 1024)
        print(f"\nüìä Tama√±o total: {total_size_mb:.2f} MB")
    
    print("\nüöÄ Pr√≥ximos pasos:")
    print("   1. Revisa la gu√≠a generada")
    print("   2. Ejecuta los ejemplos de c√≥digo")
    print("   3. Practica con las pruebas unitarias")
    print("   4. Implementa las mejoras sugeridas")
    
    print("\nüìñ Gu√≠as disponibles:")
    print("   - Guia_MongoDB_Avanzada.md (Gu√≠a con 3 preguntas detalladas)")
    print("   - ejemplos_practicos/ (Ejemplos ejecutables)")

def main():
    """
    Funci√≥n principal que ejecuta todo el proceso
    """
    print("üçÉ PROCESO COMPLETO DE GENERACI√ìN DE GU√çA DE MONGODB")
    print("=" * 80)
    print("Este script automatiza todo el proceso desde la extracci√≥n hasta la generaci√≥n final")
    print("de la gu√≠a avanzada de MongoDB con ejemplos, pruebas unitarias y mejoras.")
    print()
    
    # Verifica dependencias
    if not check_dependencies():
        print("‚ùå Error verificando dependencias")
        return False
    
    # Verifica archivos necesarios
    if not check_files():
        print("‚ùå Error verificando archivos")
        return False
    
    # Ejecuta el proceso completo
    steps = [
        ("Extracci√≥n", run_extraction),
        ("Procesamiento", run_processing),
        ("Creaci√≥n de Ejemplos", create_example_files)
    ]
    
    for step_name, step_function in steps:
        print(f"\n{'='*20} {step_name.upper()} {'='*20}")
        if not step_function():
            print(f"‚ùå Error en el paso: {step_name}")
            return False
        print(f"‚úÖ Paso {step_name} completado exitosamente")
    
    # Muestra resumen final
    show_final_summary()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéâ ¬°Todo el proceso se complet√≥ exitosamente!")
            sys.exit(0)
        else:
            print("\n‚ùå El proceso fall√≥")
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Proceso interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error inesperado: {e}")
        sys.exit(1) 